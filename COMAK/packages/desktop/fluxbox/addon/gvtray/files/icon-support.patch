diff -Naur gvtray-1.1.orig//gvtray.py gvtray-1.1/gvtray.py
--- gvtray-1.1.orig//gvtray.py	2006-09-01 01:20:07.000000000 +0300
+++ gvtray-1.1/gvtray.py	2011-09-16 03:11:38.960000121 +0300
@@ -27,229 +27,233 @@
 except:
       pass
 
-
-
-
-
 class tray_icon:
-    
+
     #--------------------------------------------
     # initialization
     #--------------------------------------------
 
     def __init__(self):
-	# create a trayicon object
+    # create a trayicon object
         self.icon = egg.trayicon.TrayIcon("gvtray")
 
-	# create a eventbox object which is going to be added to the trayicon object
-        self.tray_eventbox = gtk.EventBox()  
+    # create a eventbox object which is going to be added to the trayicon object
+        self.tray_eventbox = gtk.EventBox()
 
-	# add the eventbox object to the trayicon object for event handling (click, scroll)
+    # add the eventbox object to the trayicon object for event handling (click, scroll)
         self.icon.add(self.tray_eventbox)
-        
-	# get the actual Master volume
+
+    # get the actual Master volume
         self.volume = alsa.Mixer('Master').getvolume()[0]
-        
-	# create a label for viewing actual sound volume and add it to the eventbox obj. from the trayicon obj.
-        self.label = gtk.Label(str(self.volume))
-        self.tray_eventbox.add(self.label)
 
-	# aconnect "click" and "scroll" events to their handlers
+    # create an image for trayicon
+        self.image = gtk.Image()
+
+    # set image due to volume level
+        self.set_image()
+
+    # add image to the eventbox obj. from the trayicon obj.
+        self.tray_eventbox.add(self.image)
+
+    # create a label for viewing actual sound volume and add it to the eventbox obj. from the trayicon obj.
+        #self.label = gtk.Label(str(self.volume))
+        #self.tray_eventbox.add(self.label)
+
+    # aconnect "click" and "scroll" events to their handlers
         self.tray_eventbox.connect("button_press_event", self.clicked)
-        self.tray_eventbox.connect("scroll-event", self.wheel)  
-        
-	# show the trayicon (+ etc.)
-        self.icon.show_all() 
-        
-	# create an about dialog, tray_menu (includes quit and about) and volume_popup object
+        self.tray_eventbox.connect("scroll-event", self.wheel)
+
+    # show the trayicon (+ etc.)
+        self.icon.show_all()
+
+    # create an about dialog, tray_menu (includes quit and about) and volume_popup object
         self.about = about_dialog()
         self.menu = tray_menu()
         self.volume_popup = tray_volume_scale()
-        
-	# the volume_popup is not shown (doesn't exist)
+
+    # the volume_popup is not shown (doesn't exist)
         self.volume_popup_exists = False
-        
 
+    def set_image(self):
+        if self.volume == 0:
+            self.image.set_from_file("icons/media-volume-0.png")
+        elif self.volume > 0 and self.volume <= 30:
+            self.image.set_from_file("icons/media-volume-1.png")
+        elif self.volume > 30 and self.volume <= 60:
+            self.image.set_from_file("icons/media-volume-2.png")
+        elif self.volume > 60:
+            self.image.set_from_file("icons/media-volume-3.png")
 
 
     #
     #---- clicked  :the eventbox (from the trayicon) click event handler
-    #       
+    #
     def clicked(self,widget,event):
         # right click
         if event.button == 3:
             print "right click"
-	    # open the tray_menu (includes quit and about)
+        # open the tray_menu (includes quit and about)
             self.menu.popup(event)
-	
-	# left click 
+
+        # left click
         elif event.button == 1:
             print "left click"
-	    # volume_popup window is opened, close it
+        # volume_popup window is opened, close it
             if self.volume_popup_exists:
                 self.volume_popup.close()
                 self.volume_popup_exists = False
-	    # volume_popup window is closed, open it
+        # volume_popup window is closed, open it
             else:
                 self.volume_popup.create()
                 self.volume_popup_exists = True
-            
 
 
     #
     #---- wheel  :the eventbox (from the trayicon) wheel scroll event handler
-    #              
+    #
     def wheel(self,widget,event):
-	# get the current sound volume
+        # get the current sound volume
         self.volume = alsa.Mixer('Master').getvolume()[0]
 
-	# the wheel was scrolled up - take the sound volume up
+        # the wheel was scrolled up - take the sound volume up
         if event.direction == gtk.gdk.SCROLL_UP:
             self.volume_up()
 
-	# the wheel was scrolled down - take the sound volume down
+        # the wheel was scrolled down - take the sound volume down
         elif event.direction == gtk.gdk.SCROLL_DOWN:
-            self.volume_down()           
-        
-	# actualize the volume
-	self.volume = alsa.Mixer('Master').getvolume()[0]
+            self.volume_down()
+
+        # actualize the volume
+        self.volume = alsa.Mixer('Master').getvolume()[0]
 
-	# print the actual sound volume              
+        # print the actual sound volume
         print "volume: " + str(self.volume) + "%"
-        
-	# if the volume_popup window is opened, actualize it - set it to the new value
+
+        # if the volume_popup window is opened, actualize it - set it to the new value
         if self.volume_popup_exists :
             self.volume_popup.scale.set_value(self.volume)
-        
-	# actualize the trayicon label value - new sound volume    
-        self.label.set_label(str(self.volume))  
-    
-  
-  
+
+        # update the trayicon image
+        self.set_image()
+
     #
     #---- volume_up  :take the sound volume up in one step
-    #       
+    #
     def volume_up(self):
-	# if the sound is muted, unmute it and set the sound volume to 4 
+        # if the sound is muted, unmute it and set the sound volume to 4
         if alsa.Mixer('Master').getmute()[0] == 1:
             alsa.Mixer('Master').setmute(0) 
             alsa.Mixer('Master').setvolume(4)
 
-	# if the volume is under 97, act normally - increase the volume for one step
+        # if the volume is under 97, act normally - increase the volume for one step
         elif self.volume < 97:
             alsa.Mixer('Master').setvolume(self.volume+4)
 
-	# the volume is over 97, set it to 100
+        # the volume is over 97, set it to 100
         else:
             alsa.Mixer('Master').setvolume(100)
-    
-    
+
+
     #
     #---- volume_down  :take the sound volume down in one step
-    #      
+    #
     def volume_down(self):
-	# if the volume is over 3, act normally - decrease it's value for one step
+        # if the volume is over 3, act normally - decrease it's value for one step
         if self.volume > 3:
             alsa.Mixer('Master').setvolume(self.volume-4)
 
-	# the volume is under 3, set it to 0 and mute it
+        # the volume is under 3, set it to 0 and mute it
         elif self.volume > 0:
             alsa.Mixer('Master').setvolume(0)
             alsa.Mixer('Master').setmute(1)
 
 
-
-
 class tray_menu:
     def __init__(self):
-	# create the window object - instance of gtk.Menu
+        # create the window object - instance of gtk.Menu
         self.window = gtk.Menu()
-        
-	# create the menu separator menu item object
+
+        # create the menu separator menu item object
         menu_item_separator = gtk.SeparatorMenuItem()
-        
-	# create the about menu item object with it's icon
+
+        # create the about menu item object with it's icon
         menu_item_about = gtk.ImageMenuItem('gtk-about',None)
 
-	# connect a handler to it
+        # connect a handler to it
         menu_item_about.connect('activate',self.about_clicked)
 
-	# add the about menu item to the menu object
+        # add the about menu item to the menu object
         self.window.add(menu_item_about)
-        
-	# add the separator menu item to the menu object	
+
+        # add the separator menu item to the menu object
         self.window.add(menu_item_separator)
-        
-	# create the quit menu item object with it's icon
+
+        # create the quit menu item object with it's icon
         menu_item_quit = gtk.ImageMenuItem('gtk-quit',None)
 
-	# connect a handler to it
+        # connect a handler to it
         menu_item_quit.connect('activate',self.exit)
 
-	# add the quit menu item to the menu object	
+        # add the quit menu item to the menu object
         self.window.add(menu_item_quit)
-        
-	# show the menu
-        self.window.show_all() 
-        
-        
-        
-    def exit(self,widget):
 
-	# quit menu item handler -> quit the application 
+        # show the menu
+        self.window.show_all()
+
+
+    def exit(self,widget):
+        # quit menu item handler -> quit the application 
         gtk.main_quit()
-    
-    
-    
+
+
     def about_clicked(self,widget):
-	# about menu item handler -> create the about window
+        # about menu item handler -> create the about window
         gvtray.about.create()
-        
-    
-    def popup(self,event):
-	# popup-show the menu
-        self.window.popup( None, None, None, 0, event.time ); 
 
 
+    def popup(self,event):
+        # popup-show the menu
+        self.window.popup( None, None, None, 0, event.time );
+
 
 class about_dialog:
     def create(self):
         # set the glade file
-        self.gladefile = "gvtray_about/gvtray_about.glade"  
+        self.gladefile = "gvtray_about/gvtray_about.glade"
 
         # create the widget three
         self.wTree = gtk.glade.XML(self.gladefile, "window_about")
 
         # create the "about" window
         self.window = self.wTree.get_widget("window_about")
-	self.window.set_name("gvtray")
-	self.window.connect("response", lambda d, r: self.close())
+        self.window.set_name("gvtray")
+        self.window.connect("response", lambda d, r: self.close())
 
     def close(self):
-        self.window.destroy()        
-        
+        self.window.destroy()
+
 
 class tray_volume_scale:
     def create(self):
-	# create the volume window 
+        # create the volume window
         self.scale_window = gtk.Window(type=gtk.WINDOW_POPUP)
 
-	# declare the window width based on the trayicon's size
-	self.window_width = gvtray.icon.window.get_size()[0]
+        # declare the window width based on the trayicon's size
+        self.window_width = gvtray.icon.window.get_size()[0]
 
-	# declare the window height
+        # declare the window height
         self.window_height = 180
 
-	# get the volume window coordinates
+        # get the volume window coordinates
         coordinates = self.get_tray_coordinates(gvtray.icon,self.window_height,self.window_width)
-        
-	# place the window to the coordinates
+
+        # place the window to the coordinates
         self.scale_window.move(coordinates[0],coordinates[1])
-    
-	# create the volume scale widget object
+
+        # create the volume scale widget object
         self.scale = gtk.VScale()
 
-	# define it's features
+        # define it's features
         self.scale.set_update_policy(gtk.UPDATE_CONTINUOUS)
         self.scale.set_digits(1)
         self.scale.set_value_pos(gtk.POS_TOP)
@@ -257,22 +261,22 @@
         self.scale.set_inverted(True)
         self.scale.set_range(0,100)
 
-	# size the volume scale to the window's size
+        # size the volume scale to the window's size
         self.scale.set_size_request(self.window_width,self.window_height)
 
-	# set the actual volume scale value to the actual volume value
+        # set the actual volume scale value to the actual volume value
         self.scale.set_value(gvtray.volume)
 
-	# connect the "move" event to it's handler
+        # connect the "move" event to it's handler
         self.scale.connect("motion_notify_event", self.setted)
-                
-	# add the volume scale to the volume window
+
+        # add the volume scale to the volume window
         self.scale_window.add(self.scale)
 
-	# show the volume window
+        # show the volume window
         self.scale_window.show_all()
-        
-        
+
+
     def get_tray_coordinates(self,trayicon,window_height,windows_width):
         """
         http://www.daa.com.au/pipermail/pygtk/2006-February/011837.html
@@ -285,38 +289,42 @@
         size=trayicon.window.get_size()
         screen=trayicon.window.get_screen()
         screen_height=screen.get_height()
-	print screen_height
+        print screen_height
 
-	# if the trayicon is less than 180 under the upper screen border, place the volume window under the trayicon
-	# if not, plae it over the trayicon
-	if coordinates[1] <= window_height:
+        # if the trayicon is less than 180 under the upper screen border,
+        #place the volume window under the trayicon
+        # if not, plae it over the trayicon
+        if coordinates[1] <= window_height:
             y=coordinates[1]+size[1]
         else:
             y=coordinates[1]-window_height
 
         msg_xy=(coordinates[0],y)
         return msg_xy
-        
-        
+
+
     def close(self):
-	# close the scale window
+        # close the scale window
         self.scale_window.destroy()
-        
-    
+
+
     def setted(self,widget,event):
-	# the "move" event handler
-	
-	# set the new volume value to it's variable
+    # the "move" event handler
+
+        # set the new volume value to it's variable
         gvtray.volume = int(self.scale.get_value())
-	
-	# set the new Master volume
+
+        # set the new Master volume
         alsa.Mixer('Master').setvolume(gvtray.volume)
 
-	# print the actual volume
+        # print the actual volume
         print "volume: " + str(gvtray.volume) + "%"
 
-	# update the trayicon's volume label
-        gvtray.label.set_label(str(gvtray.volume)) 
+        # update the trayicon's volume label
+        #gvtray.label.set_label(str(gvtray.volume))
+
+        # update the trayicon's volume image
+        gvtray.set_image()
 
 
 #---------------------------------------------------------------------------------------------
