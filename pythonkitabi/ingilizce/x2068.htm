

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="x2068.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>String conversions</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="String Objects in Python and Qt"
HREF="c2029.htm"><LINK
REL="PREVIOUS"
TITLE="String Objects in Python and Qt"
HREF="c2029.htm"><LINK
REL="NEXT"
TITLE="QCString &#8212; simple strings in PyQt"
HREF="x2104.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="c2029.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 8. String Objects in Python and Qt</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="x2104.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>String conversions</A
></H1
><P
>I will return to
      <TT
CLASS="CLASSNAME"
>QCString</TT
> later, as
      <TT
CLASS="CLASSNAME"
>QString</TT
> is used everywhere in Qt.  All
      user-visible text is set using <TT
CLASS="CLASSNAME"
>QString</TT
>s,
      and if a widget returns some text, it will return a
      <TT
CLASS="CLASSNAME"
>QString</TT
> as well. It should become clear
      that the only way to work comfortably with strings in Python and
      Qt is to have some automatic conversion between Python string
      objects and <TT
CLASS="CLASSNAME"
>QString</TT
>s.
    </P
><P
>The conversion from a Python string to a
    <TT
CLASS="CLASSNAME"
>QString</TT
> is
      completely transparent. Any Qt class method that asks for a
      <TT
CLASS="CLASSNAME"
>QString</TT
> as an argument accepts any Python
      string (or Python Unicode string). The other way around isn't
      all that transparent, unfortunately.  When you ask,
      for example, a <TT
CLASS="CLASSNAME"
>QMultiLineEdit</TT
> widget for its
      contents, you get a <TT
CLASS="CLASSNAME"
>QString</TT
>. If you try to use
      Python's regular expression engine on this object, of if you try
      to write it to a file, you will be surprised at the results:
    </P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 8-1. qstring1.py &#8212; conversion from
        <TT
CLASS="CLASSNAME"
>QString</TT
> to a Python string.</B
></P
><PRE
CLASS="PROGRAMLISTING"
>#
# qstring1.py - saving a QString to a file
#

from qt import *

# Construct a Python string

pyString = """Now is the summer of our sweet content,
Made o'er-cast winter by these Tudor clouds.
And I that am not shaped for black-faced war,
"""

# Construct a Qt QString

qtString=QString("""I that am rudely cast and want true majesty,
Am forced to fight,
To set sweet England free.
I pray to Heaven we fare well,
And all who fight us go to Hell.
""")

f=open("richard", "w+")
f.write(pyString)
f.flush()
f.write(qtString)
f.close()
      </PRE
></DIV
><P
>If you run this script, you'll get the
      following output:</P
><PRE
CLASS="SCREEN"
>boud@calcifer:~/doc/opendoc/ch4 &#62; python qstring1.py
Traceback (most recent call last):
  File "qstring1.py", line 26, in ?
    f.write(qtString)
TypeError: read-only character buffer, instance
boud@calcifer:~/doc/opendoc/ch4 &#62;
    </PRE
><P
>There are good reasons for this behavior.
      Returning <TT
CLASS="CLASSNAME"
>QString</TT
>s from widgets gives the
      developer access to all the neat Qt string handling
      functionality. A Qt string is mutable, in contrast to a Python
      string, and having the Qt <TT
CLASS="CLASSNAME"
>QString</TT
> makes
      it easier to change the contents in place. Lastly, returning a
      Qt string instead of a Python string avoids a somewhat costly
      conversion which might not be needed if all you want to do is to
      stuff the text in another Qt widget.</P
><P
>Of course, the downside is that if you want
      to treat a QString object as a Python string, you'll have to
      convert it yourself, using one of the Python built-in functions
      <TT
CLASS="FUNCTION"
>str()</TT
> or <TT
CLASS="FUNCTION"
>unicode()</TT
>.
      Adapting the previous script makes it work as expected:</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 8-2. qstring2.py - second try of saving a
        <TT
CLASS="CLASSNAME"
>QString</TT
> to a file</B
></P
><PRE
CLASS="PROGRAMLISTING"
>#
# qstring2.py - saving a QString to a file
#

from qt import *

# Construct a Python string

pyString = """Now is the summer of our sweet content,
Made o'er-cast winter by these Tudor clouds.
And I that am not shaped for black-faced war,
"""

# Construct a Qt QString

qtString=QString("""I that am rudely cast and want true majesty,
Am forced to fight,
To set sweet England free.
I pray to Heaven we fare well,
And all who fight us go to Hell.
""")

f=open("richard", "w+")
f.write(pyString)
f.flush()
f.write(str(qtString))
f.close()
      </PRE
></DIV
><P
>I don't need to show you screen output here
      &#8212; it just works. You will have to pay attention to what
      happens with the strings you receive from Qt widgets. If you
      want to write the contents to a file, database, or to mangle the
      string with Python modules, you will need to explicitly convert
      the QString object to Python strings. If you want to feed the
      string to another widget, you don't have to do anything.</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="c2029.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="x2104.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>String Objects in Python and Qt</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="c2029.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>QCString &#8212; simple strings in PyQt</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
