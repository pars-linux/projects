<chapter id="ch23">
  <title>Debugging</title>

  <indexterm>
  <primary>debugging</primary>
  </indexterm>
  <para id="para-ch23-1">At some point in their career, most
    programmers realize that their job title should be "senior
    debugger" instead of senior developer. Debugging is the art of
    getting your code to run as you intended, instead of running as
    you wrote it. That is the nub, really&mdash;in most cases it's your code
    that is wrong. Python itself is pretty flawless &mdash; there are
    hardly any noticeable bugs left. The same goes for Qt. PyQt might
    still have a few bugs in it, but you would have to be using
    decidedly advanced features to stumble onto them. In most cases,
    your own &lsquo;undocumented features' will be your undoing.</para>

  <para id="para-ch23-2">In this chapter we'll use the debugger
    included in <application>BlackAdder</application> to find bugs in
    some simple scripts. If you don't understand the actual code yet,
    don't worry &mdash; you can always come back later. The main goal
    is to familiarize yourself with the BlackAdder environment and the
    concept of debugging.</para>

  <para id="para-ch23-3">There are two basic methods of debugging. The
    first is sprinkling your code with <function>print</function>
    statements that dump the contents of the variables of your
    application. The second method is to follow your application as it
    executes using a good debugger, examining the application data
    using the tools the debugger provides.</para>

  <indexterm>
  <primary>pdb</primary>
  </indexterm>
  <para id="para-ch23-4">Python has always been possessed of a basic
    command-line based debugger, <application>pdb</application>,
    similar to the infamous Unix debuggers,
    <application>dbx</application> and <application>gdb</application>.
    If you've ever tried to actually trace an application using one of
    these, you'll know the exact meaning of the word &lsquo;inconvenient'.
    Using them is on a par with using <application>ed</application> or
    <application>edlin</application> &mdash; both line editors &mdash;
    for editing code.</para>

  <para id="para-ch23-5">To show a session with pdb:</para>

  <screen>
Python 2.1.1 (#1, Aug 11 2001, 20:14:53)
[GCC 2.95.2 19991024 (release)] on linux2
Type "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pdb
&gt;&gt;&gt; import button
&gt;&gt;&gt; pdb.run("button.main([])")
&gt; /home/boudewijn/doc/pyqt/ch23/&lt;string&gt;(0)?()
(Pdb) continue
&gt; /home/boudewijn/doc/pyqt/ch23/&lt;string&gt;(1)?()
(Pdb) continue
Traceback (most recent call last):
  File "button.py", line 26, in slotSlot
    i = 1/0
ZeroDivisionError: integer division or modulo by zero
--Return--
&gt; /home/boudewijn/doc/pyqt/ch23/&lt;string&gt;(1)?()-&gt;None
(Pdb) w
&gt; /home/boudewijn/doc/pyqt/ch23/&lt;string&gt;(1)?()-&gt;None
(Pdb) l
[EOF]
(Pdb) q
&gt;&gt;&gt;
  </screen>

  <para id="para-ch23-6">You can see why there have been many attempts
    to create a useful GUI fronted to <application>pdb</application>.
    Most have suffered from the fact that they don't know where to
    stop debugging. If you are debugging a piece of code that contains
    the statement <function>string.join()</function>, you probably
    don't want to single-step into the <filename>string.py</filename>
    module, which is part of the Python system library&mdash;and yet
    this is exactly what happens very often.</para>    


  <para id="para-ch23-7"><application>BlackAdder</application>
    includes a very nice debugger, one that knows where to stop
    debugging. It includes all the usual facilities, like
    single-stepping, breakpoints and a watch panel for variable
    values.</para>

  <para id="para-ch23-8">Currently missing features include
    conditional breakpoints (a breakpoint that only breaks execution
    on certain values for certain variables) and runtime code changes.
    You can change variable values runtime using the Python
    interpreter window, though.</para>

    <screenshot>
    <mediaobject>
      <imageobject>
          <imagedata fileref="ch23/ba_debugger.eps" scale="35" align="center">
      </imageobject>
      <caption><para id="para-ch23-9">The BlackAdder debugger.</para>
      </caption>
    </mediaobject>
  </screenshot>

  <indexterm>
  <primary>eric</primary>
  </indexterm>
  <indexterm>
  <primary>debugging</primary><secondary>eric</secondary>
  </indexterm>
  <indexterm>
  <primary>QCanvas</primary>
  </indexterm>
  <para id="para-ch23-10">The PyQt library includes another, simpler
    debugger, called <application>eric</application>. This application
    is no longer maintained, so I won't spend much time here
    describing the way it works. It does, however, provide a very nice
    example of using regular expressions and PyQt's
    <classname>QCanvas</classname> widget. You can start
    <application>eric</application> by typing
    <filename>eric</filename> on the command-line.</para>


  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="ch23/eric.eps" scale="40"  align="center">
      </imageobject>
      <caption><para id="para-ch23-11">Eric, the debugger included in PyQt.</para>
      </caption>
    </mediaobject>
  </screenshot>

  <sect1><title>Running scripts</title>

    <para id="para-ch23-12">The BlackAdder toolbar has two buttons for debugging your
      code. You can either debug a single script, or the whole
      project.</para>

    <!-- XXX: buttons might change -->
    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="ch23/toolbar.eps" scale="40"  align="center">
        </imageobject>
        <caption><para id="para-ch23-13">The script execution toolbar. From left to
            right: run script, run project, debug script, debug
            project, restart debugger, continue, single step, set
            breakpoint, clear breakpoint and cancel debugging.</para>
        </caption>
      </mediaobject>
    </screenshot>

    <para id="para-ch23-14">One thing to be aware of when running
      scripts or projects from <application>BlackAdder</application>
      is that everything you <function>print</function> or write to
      standard error or standard output gets lost, unless you have the
      Python interpreter window active. Eric also prints the output to
      the Python shell window.</para>
  </sect1>



  <sect1><title>Setting breakpoints</title>

    <indexterm>
  <primary>breakpoints</primary>
  </indexterm>
  <indexterm>
  <primary>debugging</primary><secondary>breakpoints</secondary>
  </indexterm>
  <para id="para-ch23-15">Setting a breakpoint in your script is
      done by clicking on the left vertical gray bar in the editor
      pane. It will place a small, inconspicuous white circle in the
      editor border. You can also set and unset breakpoints during a
      debugging session.</para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="ch23/breakpoint.eps" scale="40"  align="center">
        </imageobject>
        <caption><para id="para-ch23-16">Setting a breakpoint (the small white circle
            left to &lsquo;print i').</para>
        </caption>
      </mediaobject>
    </screenshot>

    <para id="para-ch23-17">Now, if you start debugging the script,
      and press the Continue button, the script will run until it
      arrives at the <literal>print i</literal> line. The output will
      show up in the Python Interpreter window, if you have it
      open.</para>

    <para id="para-ch23-18">Now that you know how breakpoints work,
      I'll show a good way to use them.</para>

    <para id="para-ch23-19">In GUI programming, breakpoints are often
      the only way of debugging code that becomes activated after the
      main loop has started. Let's look at the following script, where
      there is a bug in the code that is activated when the button is
      pressed:</para>

    <programlisting>
#
# button.py
#

from qt import *
import sys

class MainWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.setCaption("Button")

        self.grid=QGrid(2, self)
        self.grid.setFrameShape(QFrame.StyledPanel)

        self.bn=QPushButton("Hello World", self.grid)
        self.bn.setDefault(1)

        self.connect(self.bn, SIGNAL("clicked()"),
                     self.slotSlot)

        self.setCentralWidget(self.grid)

    def slotSlot(self):
        i = 1/0

def main(args):
    app=QApplication(args)
    win=MainWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

if __name__=="__main__":
    main(sys.argv)
    </programlisting>

    <para id="para-ch23-20">If you try to single-step until you've
      arrived at the bug, you will be stepping for a long time. It is
      easier to continue the application until it hits the breakpoint
      in <function>slotSlot()</function>, and take it from there by
      hand.</para>

  </sect1>

 <sect1><title>Stepping along</title>

    <para id="para-ch23-21">If your application goes wrong in the
      initialization phase, then you might want to single step every
      statement until you arrive at the offending statement. Let's
      debug the same script as in the previous section, but altered
      slightly to introduce a pesky typo. If you can spot it from
      eyeballing the code alone, then you've probably skipped ahead to
      <xref linkend="ch6">, on signals and slots.</para>

    <programlisting>

#
# button2.py
#

from qt import *
import sys

class MainWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.setCaption("Button")

        self.grid=QGrid(2, self)
        self.grid.setFrameShape(QFrame.StyledPanel)

        self.bn=QPushButton("Hello World", self.grid)
        self.bn.setDefault(1)

        self.connect(self.bn, SIGNAL("clicked()"),
                     self.slotSlot())

        self.setCentralWidget(self.grid)

    def slotSlot(self):
        i = 1/0

def main(args):
    app=QApplication(args)
    win=MainWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

if __name__=="__main__":
    main(sys.argv)
    </programlisting>

    <para id="para-ch23-22">Running this code won't place the window on screen.
      Instead, it ends with the following stacktrace:</para>

    <screen>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 37, in ?
  File "&lt;stdin&gt;", line 30, in main
  File "&lt;stdin&gt;", line 21, in __init__
  File "&lt;stdin&gt;", line 26, in slotSlot
ZeroDivisionError: integer division or modulo by zero
    </screen>

    <para id="para-ch23-23">If you single step this using
      <application>BlackAdder</application> you'll notice that
      directly after the line:</para>

    <programlisting>
        self.connect(self.bn, SIGNAL("clicked()"),
                     self.slotSlot())
    </programlisting>

    <para id="para-ch23-24">Python continues with:</para>

    <programlisting>
    def slotSlot(self):
    </programlisting>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="ch23/step.eps" scale="30"  align="center">
        </imageobject>
        <caption><para id="para-ch23-25">Accidentally stepping into a function.</para>
        </caption>
      </mediaobject>
    </screenshot>

    <para id="para-ch23-26">Armed with this knowledge, it's easy to
      see what went wrong: we <emphasis>called</emphasis> the function
      in the <function>connect</function> line by adding the two
      brackets, passing the result of the
      <function>slotSlot()</function> function to the
      <function>connect()</function>, instead of giving the
      <emphasis>function</emphasis> object as a parameter to
      <function>connect</function>. Simply changing the line
      to:</para>

    <programlisting>
        self.connect(self.bn, SIGNAL("clicked()"),
                     self.slotSlot)
    </programlisting>

    <para id="para-ch23-27">And the bug is fixed! Incidentally, this
      also shows that you can create new signal/slot connections on
      the fly, from the output of a function&mdash;this is something to
      be aware of when creating a very dynamic application.</para>

  </sect1>

   <sect1><title>Debugging Techniques</title>

    <indexterm>
  <primary>debugging</primary><secondary>techniques</secondary>
  </indexterm>
  <para id="para-ch23-28">Once you know your debugger, the real work
      can begin. Here's a short overview of debugging techniques that
      I have found useful.</para>

    <sect2><title>Avoid changing your code</title>

      <para id="para-ch23-29">The temptation to change the code is
        almost too strong to resist. Perhaps your application doesn't
        work, and you don't have a solid idea of where the problem is,
        but only a hunch. So you start changing code. Suddenly you
        notice another problem&mdash;and so you change more code.
        Nothing works, so you change some more code...</para>

      <para id="para-ch23-30">Eventually, the original bug disappears
        &mdash; or the application simply crashes before it reaches
        the bug!</para>

      <para id="para-ch23-31">So, the golden rule is: &lsquo;Don't
        change code at random'. Indeed don't change any code at all
        before you know exactly where the problem is. (I'm not talking
        about a sprinkling of <function>print</function> statements
        here, of course.)</para>

      <para id="para-ch23-32">There's another point to the maxim
        &lsquo;don't change your code': you should debug problems
        <emphasis>now</emphasis>, and not when you've finished writing
        the application. If you don't fix a bug as soon as you come
        across it, you'll probably never fix it. And bugs don't
        disappear because you added more code.</para>

    </sect2>

    <sect2><title>Gather data</title>

      <para id="para-ch23-33">Try to determine the pattern of
        failures. This pattern might be caused by data or by usage
        patterns. That's why it is so important to have other people
        test your software (a cat walking on a keyboard is an
        excellent input simulator!). You know all the &lsquo;right'
        paths through your code, so you'll probably never bring it
        down. Experienced users know those paths, too, which is why
        software appears to become more stable after people have been
        using it for a longer time.</para>

    </sect2>


    <sect2><title>Minimal examples</title>

      <para id="para-ch23-34">Sometimes you simply want to know
        whether a certain Python construction works at all. Nobody is
        perfect, and everyone has little things they are perpetually
        unsure about. Mine is string slicing. I never know what
        exactly will be returned by
        <function>"bla.bla"[:-4]</function>.</para>

      <indexterm>
  <primary>Practice of Programming</primary>
  </indexterm>
  <para id="para-ch23-35">In chapter five of the excellent book
        <citetitle>The Practice of Programming</citetitle>, Kernighan
        and Pike advise to try out your hunches with a little bit of
        code, whenever you wonder whether something works at all. The
        Python shell window is tailor made for this:</para>

      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="ch23/shellwindow.eps" scale="40"  align="center">
          </imageobject>
          <caption><para id="para-ch23-36">I wonder what happens when...</para>
          </caption>
        </mediaobject>
      </screenshot>

    </sect2>
  </sect1>


  <sect1><title>If all else fails</title>

    <para id="para-ch23-37">If you can't nail that pesky bug down, it
      helps to confess all. Go to a colleague, to your partner in
      health and sickness, or, at a pinch, to your cat, and tell them
      about the bug. You probably won't even have to finish your
      explanation&mdash;before you've done so, you'll have seen the light
      yourself.</para>

    <para id="para-ch23-38">However, even if consulting your cat does
      not avail you of the right solution, you might have finally
      stumbled onto a problem with PyQt or with Qt. In all the years
      that I've been developing with Python I have not come across a
      single bug in Python, and, what's more, I've never seen someone
      post a bug in Python to the comp.lang.python newsgroup.</para>

    <indexterm>
  <primary>mailing list</primary>
  </indexterm>
  <para id="para-ch23-39">Your first course of action should be to
      subscribe yourself to the PyKDE mailing list (which also has
      PyQt as its subject), and check in the archives at
      http://mats.gmd.de/mailman/listinfo/pykde, in case your problem
      has been mentioned before.</para>

    <para id="para-ch23-40">If it hasn't been mentioned, you might
      want to write the smallest possible script that reproduces the
      erroneous behavior. This should be easy enough if you have
      neatly modularized your code. You can then post this script
      together with the debug output (a stacktrace in technical
      parlance) to the PyKDE mailing list.</para>

  </sect1>
  
  
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-general-insert-case:lower
sgml-default-dtd-file:"../chapter.ced"
End:
-->