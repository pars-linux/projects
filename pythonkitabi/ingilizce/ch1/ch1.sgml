<chapter id="ch1">
  <title>Qt Concepts</title>
  
  <para id="para-ch1-1">This chapter describes the way Python and Qt
    bind together, using the PyQt wrapper library. Concepts peculiar
    to PyQt and Qt such as signals and slots, inheritance and gui
    design, are introduced by building steadily more complex versions
    of the hackneyed <emphasis>hello world</emphasis> example
    application.</para>

  <sect1>
    <title>
      Python, Qt and PyQt
    </title>

    <para id="para-ch1-2">Unlike a tool like Visual Basic, which
      consists of a GUI engine with a scripting language built-in,
      Python does not have a native GUI interface. But there are many
      GUI libraries available for Python &mdash; examples are
      wxPython, Tkinter, PyGTK, PyFLTK, FoxPy, and PyQt. PyQt is based
      on Qt, an advanced GUI library for Windows and Unix written in
      C++ by Eirik Eng and Arnt Gulbrantsen of Trolltech in Norway.
      It's quite easy to wrap C++ or C libraries so they can be used
      from Python &mdash; and when Phil Thompson was looking around
      for a good GUI library for Python he decided to wrap Qt,
      producing PyQt. PyQt forms the basis for the BlackAdder rapid
      development environment.</para>

    <para id="para-ch1-3">Qt is very advanced: the library offers a
      large set of well-designed screen objects, or widgets, and many
      utility classes. In addition, Qt has a clean object-oriented
      design that is easy to grasp and intuitive to use. PyQt
      applications can run without any change, without recompiling,
      both on Windows and Unix/X11 systems &mdash; and soon on Apple's
      OS X, too.</para>

    <para id="para-ch1-4">PyQt widgets can be drawn in
      <emphasis>styles</emphasis>, to make them appear exactly like
      the native widgets of the operating system the application runs
      on (or like something different altogether, if you want).</para>

    <para id="para-ch1-5">There are two kinds of objects in the Qt
      library&mdash; visual and non-visual. The mother of all visual
      objects is QWidget, widget being the term Qt uses for what the
      Windows world usually calls <emphasis>control</emphasis>. There
      are simple widgets such as labels and buttons, and complex widgets
      such as canvas views. Even dialog windows are descended from
      <classname>QWidget</classname>.</para>

    <para id="para-ch1-6"><classname>QWidget</classname> and many
      other, but not all, Qt classes derive from the
      <classname>QObject</classname> base class &mdash; a class like
      <classname>QLayout</classname> <emphasis>is</emphasis> derived
      from <classname>QObject</classname>, but
      <classname>QPixmap</classname> is not. Whether a class is
      derived from <classname>QObject</classname> is determined by
      whether there is a need for signals and slots, and whether the
      created objects must be placed in an ownership hierarchy.</para>
    
    <para id="para-ch1-7">Scripting languages like Python have a
      reputation for bad performance, but PyQt applications perform very
      well indeed; there is just a thin wrapper between the GUI objects
      and Python. Those GUI objects do most of the heavy work of pixel
      shifting, and they are written in well-optimized C++. If you try
      to do things like writing your own DTP layout engine from scratch
      using the Qt drawing primitives, you might be hindered by the
      slowness inherent in a byte-code interpreted language like Python,
      but on the whole, your application will be as responsive as one
      written in pure C++, and you'll have a working application where
      you would still be hacking the first prototype in C++.</para>
    

<!-- BR: I made a change -->
      <indexterm>
  <primary>Versions of PyQt, Qt and Python</primary>
  </indexterm>
    <note><title>A note on versions</title>

  <para id="para-ch1-8">PyQt consists of at least three
        components, Python, Qt and PyQt itself. Additionally, there is
        PyKDE, the bindings to the KDE Desktop Environment for Unix.
        That's four components with almost unrelated version
        numbering. Qt has been through three versions to date, just
        like PyQt. However, PyQt 3.x can be compiled against Qt 1.x, Qt
        2.x <emphasis>and</emphasis> Qt 3.x.
      </para>

      <para id="para-ch1-9">The differences between versions of PyQt
        consist of the range of versions of Qt supported, and certain
        matters of organization and some implementation
        details.</para>

      <para id="para-ch1-10">The relation between PyQt and Python is
        even more nebulous: PyQt works best with the latest version of
        Python, but earlier versions are known to work, too.</para>

      <para id="para-ch1-11">Anyway, just keep in mind that PyQt 3.x
        can use Qt 2.x or Qt 3.x. This book was mostly written using
        PyQt 2.x for Qt 2.x, but I've tried to include as much
        information about PyQt 3.x and Qt 3.x as I could.</para>

    </note>
<!-- END CHANGE -->

  </sect1>

  <sect1 id="ch1HelloWorld">
    <title>
      As simple as they come
    </title>

    <indexterm>
  <primary>Hello World</primary>
  </indexterm>
  <para id="para-ch1-12">Nothing like getting the feet wet: let's investigate the
      structure of a PyQt application by putting together the minimal
      set of components that can show something on screen, slowly
      expanding it to show more features.</para>

    <para id="para-ch1-13">A tiny PyQt applications has the following elements:</para>


    <itemizedlist>
      <listitem>
        <para id="para-ch1-14">
          an application object
        </para>
      </listitem>
      <listitem>
        <para id="para-ch1-15">
          a main window (which has a central widget), <emphasis>or</emphasis>
        </para>
      </listitem>
      <listitem>
        <para id="para-ch1-16">
          a main widget
        </para>
      </listitem>
    </itemizedlist>

    <para id="para-ch1-17">This is the traditional &rdquo;Hello World&rdquo; button
      application, with as little code as possible:</para>

    <mediaobject>
      <imageobject>
        <imagedata scale="80" align="center" fileref="ch1/hello1.eps">
      </imageobject>
      <caption>
        <para id="para-ch1-18">Hello World</para>
      </caption>
    </mediaobject>

    <example>
      <title>hello1.py &mdash; hello world</title>
      <programlistingco>
        <areaspec>
          <area coords="4" id="hello1impsys">
          <area coords="5" id="hello1impqt">
          <area coords="7" id="hello1createapp">
          <area coords="8" id="hello1button">
          <area coords="9" id="hello1setmainwidget">
          <area coords="10" id="hello1show">
          <area coords="11" id="hello1execloop">
        </areaspec>
        <programlisting>
#
# hello1.py
#
import sys
from qt import *

app=QApplication(sys.argv)
button=QPushButton("Hello World", None)
app.setMainWidget(button)
button.show()
app.exec_loop()
        </programlisting>
        <calloutlist>
          <callout arearefs="hello1impsys">
            <para id="para-ch1-19">We need to import the Python
              <emphasis>sys</emphasis> package, because the
              <classname>QApplication</classname> object wants to look
              at the command-line arguments the script is started
              with. For instance, starting the script with
              <userinput>python hello1.py -style=platinum</userinput>
              starts the script with the look and feel of Mac-OS 8.5,
              by passing the &ldquo;-style=platinum&rdquo; option
              through to the QApplication object.</para>

            <para id="para-ch1-20">One of the niceties of Qt is that
              you have access to all supported widget styles on all
              platforms. (Except for the Aqua style - that is only
              available on OS X, because Apple doesn't want it to
              spread to other platforms.)</para>
          </callout>
          <callout arearefs="hello1impqt">
            <para id="para-ch1-21">Next, we have to import the qt
              library. While it is possible to import only explicitly
              the elements from the library we need, it's just as easy
              and efficient to import the whole library. But we could
              have said: <programlisting> from qt import QApplication,
                QPushButton </programlisting>
            </para>
<!-- BR: I made a change -->
            <indexterm>
  <primary>qt module layout</primary>
  </indexterm>
  <para id="para-ch1-22">From version 3.x of PyQt, the
              library has been split into several separate modules.
              The <varname>Qt</varname> module still gets you all the
              basic stuff, but more advanced functionality, such as
              the canvas, is divided over separate modules,
              <varname>qtcanvas</varname> for
              <classname>QCanvas</classname>, for instance.</para>
<!-- END OF CHANGE -->
          </callout>
          <callout arearefs="hello1createapp">
            <para id="para-ch1-23">After importing the necessary
              modules, we create a Qt application object. This object
              handles the dispatching of events from the mouse and
              keyboard to the various widgets of the application.
              Never try to create more than one
              <classname>QApplication</classname> object, not even if
              you embed Python and PyQt in a C++ Qt application. In
              that case, the C++ application should create the
              <classname>QApplication object</classname> and pass a
              reference to the embedded Python interpreter.</para>
          </callout>
          <callout arearefs="hello1button">
            <para id="para-ch1-24">To keep things simple, we do not create a separate
              window object, but rather simply a pushbutton, of the type
              <classname>QPushButton</classname>. The first argument
              to the creation of the
              <classname>QPushButton</classname> is the text that is
              shown on the button. Since this is the only widget of
              the application, it doesn't have a parent.  This is what
              the <varname>None</varname> argument means &mdash;
              there is no parent, and the
              <classname>QPushButton</classname> is the root of the
              application widget tree.</para>
          </callout>
          <callout arearefs="hello1setmainwidget">
            <para id="para-ch1-25">However, we still need to apprise
              the <classname>QApplication</classname> object of that
              fact &mdash; this is done by telling the
              <classname>QApplication</classname> that our button is
              the main widget:</para>

            <programlisting>
app.setMainWidget(button)
            </programlisting>

          </callout>
          <callout arearefs="hello1show">
            <para id="para-ch1-26">Then we <function>show()</function>
              the button to the world.</para>
          </callout>
            <indexterm>
  <primary>event loop</primary><secondary>exec_loop</secondary>
  </indexterm>
          <callout arearefs="hello1execloop">
  <para id="para-ch1-27">Until the application objects
              starts the event loop, nothing will appear on screen.
              The call <function>app.exec_loop()</function> does
              return a value, but we can safely disregard it.</para>
          </callout>
        </calloutlist>
      </programlistingco>
    </example>
    <note>
      <para id="para-ch1-28">Note that this is one of the few
        instances where a method name differs between Python and C++:
        the C++ method is called <function>exec()</function>, which is
        a reserved word in Python. Except for a few cases like this,
        reading the C++ documentation for Python use demands little
        more than a simple mental substitution.</para>

      <indexterm>
  <primary>calling conventions</primary>
  </indexterm>
  <para id="para-ch1-29">Experienced Pythoneers will also note
        that the parameters in PyQt function calls are positional
        &mdash; not by keyword. In the old Tkinter GUI toolkit most
        function calls take the form:</para>

        <programlisting>
b = Button(root, text=label, command=func)
        </programlisting>

        <para id="para-ch1-30">where PyQt wants:</para>

        <programlisting>
b = QPushButton(root, label, func)
        </programlisting>

      <para id="para-ch1-31">Just something to be aware of: keyword
        parameters can be added in any old order, but positional
        parameters have to be in the right position.</para>

    </note>

  </sect1>
  <sect1 id="ch1-sect1-better-hello">
    <title>
      A better Hello World
    </title>

    <para id="para-ch1-32">Of course, you will never write a script
      like the previous one in earnest. While it works, it doesn't
      even show the correct way of setting up a PyQt application. A
      far superior structure is as follows:</para>

    <example><title>hello2.py &mdash; a better hello world</title>
      <programlisting>
import sys
from qt import *

class HelloButton(QPushButton):

    def __init__(self, *args):
        apply(QPushButton.__init__, (self,) + args)
        self.setText("Hello World")

class HelloWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.button=HelloButton(self)
        self.setCentralWidget(self.button)

def main(args):
    app=QApplication(args)
    win=HelloWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

if __name__=="__main__":
    main(sys.argv)
      </programlisting>
    </example>

    <para id="para-ch1-33">This is more like it! While still boring
      and trivial, this small program shows several important aspects
      of programming with Python and Qt: the subclassing of Qt classes
      in Python, the use of windows and widgets, and the use of
      signals and slots.</para>

    <para id="para-ch1-34">In most PyQt applications you will create a
      custom main window class, based on QMainWindow, and at least one
      custom main view widget, based on any Qt widget &mdash; it could
      be a listview, an editor window or a canvas, or, as in this
      case, a simple button. Although PyQt allows you to subclass
      almost any Qt class, you can't base a Python class on more than
      one Qt class at a time.</para>

    <para id="para-ch1-35">That is, multiple inheritance of Qt classes
      is not supported. This is seldom (if ever) a problem&mdash;try
      to imagine what a widget that looks like a checkbox and a
      radiobutton at the same time. Using two widgets in one custom
      widgets is another matter, called delegation, and is fully
      supported.</para>

    <para id="para-ch1-36">In this script we have subclassed
      <classname>QMainWindow</classname> to create a custom window
      that contains a pushbutton as its central widget. Almost always,
      a window will have the usual frills around the borders &mdash;
      menus, toolbars and statusbars. This is what QMainWindow is
      designed for. We didn't define any menu items, so the window is
      still a bit bare.</para>

    <para id="para-ch1-37">The central part of a window&mdash;the
      letterbox, so to speak&mdash;is where the application-specific
      functionality appears. This is, of course, our button.
      <classname>QMainWindow</classname> manages the resizing of its
      central widget automatically, as you might have noticed when
      dragging the borders of the window. Also, note the difference in
      geometry between this version of Hello World and the previous
      one: this is caused by the automatic layout handling that
      <classname>QMainWindow</classname> provides.</para>

    <mediaobject>
      <imageobject>
        <imagedata scale="60" align="center" fileref="ch1/hello2.eps">
      </imageobject>
      <caption><para id="para-ch1-38">A better hello world</para></caption>
    </mediaobject>

    <indexterm>
  <primary>setCentralWidget()</primary>
  </indexterm>
  <para id="para-ch1-39">You set the central part of the window with the
      setCentralWidget() method:</para>

    <programlisting>
self.setCentralWidget(self.button)
    </programlisting>

    <indexterm>
  <primary>signals and slots</primary>
  </indexterm>
  <para id="para-ch1-40">An application can have zero, one, or more
      windows &mdash; and an application shouldn't close down until
      the last window is closed. <classname>QApplication</classname>
      keeps count of the number of windows still open and will try to
      notify the world when the last one is closed. This is done
      through the signals/slots system. While this system will be
      discussed in depth in a later chapter, it's sufficiently
      important to warrant some consideration here.</para>

    <para id="para-ch1-41">Basically, objects can register an interest in each other,
      and when something interesting happens, all interested objects
      are notified. In this case, the QApplication object wants to
      know when the last window is closed, so it can quit.</para>

    <programlisting>
app.connect(app, SIGNAL("lastWindowClosed()"),
            app, SLOT("quit()"))
    </programlisting>

    <indexterm>
  <primary>quit()</primary>
  </indexterm>
  <para id="para-ch1-42">Let's analyze this line: the
      <varname>app</varname> object makes a connection between a
      signal <function>lastWindowClosed()</function> (which is sent by
      the application object itself), and its own
      <function>quit()</function> function. Using signals and slots
      from Python is extremely convenient, both for gui work and in
      more abstract situations where a decoupling between objects is
      desirable.</para>

      <para id="para-ch1-43">Another example of using signals and slots is in the
        following rewrite of the HelloWindow class:</para>

      <example><title>fragment from hello3.py</title>
        <programlisting>
...
class HelloWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.button=HelloButton(self)
        self.setCentralWidget(self.button)
        self.connect(self.button, SIGNAL("clicked()"),
                     self, SLOT("close()"))
      </programlisting>
    </example>
    
    <para id="para-ch1-44">We have added a line where the
      <function>clicked()</function> signal, which is emitted by the
      <classname>QPushButton</classname> when it is clicked, is
      connected to the <function>close()</function> slot of the
      <classname>HelloWindow</classname> class. Since
      <classname>HelloWindow</classname> inherits
      <classname>QMainWindow</classname>, it also inherits all its
      slot functions.</para>
    
    <para id="para-ch1-45">Now, if you click on the button, the
      window closes&mdash;and we have our first interactive PyQt
      application!</para>

    <para id="para-ch1-46">An interesting exercise is to create more
      than one window by rewriting the main function:</para>

      <example><title>Fragment from hello5.py</title>
        <programlisting>
...
def main(args):
    app=QApplication(args)
    winlist=[]
    for i in range(10):
        win=HelloWindow()
        win.show()
        winlist.append(win)

    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()
...
      </programlisting>
    </example>

    <para id="para-ch1-47">If you run this version of the script, ten windows will
      rapidly pop up on your desktop. You can close each window by
      pressing either the button or using the window controls &mdash;
      the application will only stop when the last one is
      closed.</para>

    <para id="para-ch1-48">Try commenting out the line
      <literal>winlist.append(win)</literal>:</para>

    <example><title>Fragment from hello4.py</title>
      <programlisting>
...
def main(args):
    app=QApplication(args)
    winlist=[]
    for i in range(10):
        win=HelloWindow()
        win.show()
        #winlist.append(win)

    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()
...
      </programlisting>
    </example>

    <para id="para-ch1-49">and see what happens...</para>

    <indexterm>
  <primary>garbage collection</primary><secondary>reference counting</secondary>
  </indexterm>
  <para id="para-ch1-50">This is one of the interesting features in
      Python: in contrast to C++, Python has a garbage collector.
      (Actually, you can choose between a garbage collector and a
      reference counter, but I don't want to get
      <emphasis>that</emphasis> technical yet). This virtual
      garbage-man will remove unreferenced objects as soon as
      possible. That means that any object that doesn't have a Python
      variable name associated with it will disappear. (Unless the
      object is the child of a <classname>QObject</classname>; see
      <xref linkend="ch3"> for all the details). If you were to try
      this trick in C++, keeping references would make no difference,
      as C++ does not delete unused objects for you, which can easily
      lead to nasty memory leaks.</para>

  </sect1>
  <sect1>

    <title>Designing forms</title>

    <indexterm>
  <primary>designing forms</primary>
  </indexterm>
  <para id="para-ch1-51">One important feature of BlackAdder and
      PyQt is the visual gui designer. You can use the designer to
      easily create all kinds of dialog windows, and even custom
      widgets.</para>

    <para id="para-ch1-52">The definition of these user-interface
      designs is saved in files in an XML format, and you can easily
      translate those to Python code. The beauty of the system is that
      you can just as easily translate your designs to valid C++ code,
      making it easy to develop your prototype in Python and, when
      satisfied, port the whole gui to fast, compiled C++. (C++ code,
      I might add, that compiles just as well on Windows, Unix/X11, OS
      X and embedded systems).</para>

    <para id="para-ch1-53">The version of Qt Designer that is included
      with Qt3 can also create complete main windows with menus and
      toolbars. Once <application>pyuic</application> has been updated
      to include those elements, you can use this in your Python
      projects, too.</para>

    <para id="para-ch1-54">Let's use Designer to design a small form
      that would be useful for connecting to some system, and hook it
      up in a small PyQt program.</para>

    <mediaobject>
      <imageobject>
        <imagedata scale="40" align="center" fileref="ch1/designer_frmconnect.eps">
      </imageobject>
      <caption><para id="para-ch1-55">A form in the gui designer</para></caption>
    </mediaobject>

    <indexterm>
  <primary>layout management</primary>
  </indexterm>
  <para id="para-ch1-56">It's quite easy to work with designer
      &mdash; just keep in mind that you <emphasis>never</emphasis>
      have to place items pixel-perfect. Just bang widgets of roughly
      the right size in roughly the right places, add the Qt layout
      managers, and see them work their magic. </para>

    <para id="para-ch1-57">You add a layout manager by selecting the
      widgets you want to be managed, and then selecting the right
      layout manager from the toolbar.</para>

    <para id="para-ch1-58">In the above design, there are three layout
      managers: the buttons on the right are stacked, the widgets
      inside the bevel are in a grid, and everything in the form is in
      another grid. Try making the dialog larger and smaller &mdash;
      it will always look good. Even better, if a visually impaired
      user chooses a large system font, say Arial 24 points bold, the
      form will still look good.</para>

    <indexterm>
  <primary>ui files</primary>
  </indexterm>
  <indexterm>
  <primary>compiling forms designs</primary>
  </indexterm>
  <para id="para-ch1-59">You can either compile the .ui file to
      Python code from BlackAdder or from the command-line.  The
      result will be something like this:</para>

    <example><title>frmconnect.py</title>
      <programlisting>
# Form implementation generated from reading ui file 'frmconnect.ui'
#
# Created: Wed Feb 28 21:34:40 2001
#      by: The Python User Interface Compiler (pyuic)
#
# WARNING! All changes made in this file will be lost!


from qt import *


class frmConnect(QDialog):
    def __init__(self,parent = None,name = None,modal = 0,fl = 0):
        QDialog.__init__(self,parent,name,modal,fl)

        if name == None:
            self.setName('frmConnect')

        self.resize(547,140)
        self.setCaption(self.tr('Connecting'))
        self.setSizeGripEnabled(1)
        frmConnectLayout = QGridLayout(self)
        frmConnectLayout.setSpacing(6)
        frmConnectLayout.setMargin(11)

        Layout5 = QVBoxLayout()
        Layout5.setSpacing(6)
        Layout5.setMargin(0)

        self.buttonOk = QPushButton(self,'buttonOk')
        self.buttonOk.setText(self.tr('&amp;OK'))
        self.buttonOk.setAutoDefault(1)
        self.buttonOk.setDefault(1)
        Layout5.addWidget(self.buttonOk)

        self.buttonCancel = QPushButton(self,'buttonCancel')
        self.buttonCancel.setText(self.tr('&amp;Cancel'))
        self.buttonCancel.setAutoDefault(1)
        Layout5.addWidget(self.buttonCancel)

        self.buttonHelp = QPushButton(self,'buttonHelp')
        self.buttonHelp.setText(self.tr('&amp;Help'))
        self.buttonHelp.setAutoDefault(1)
        Layout5.addWidget(self.buttonHelp)
        spacer = QSpacerItem(20,20,QSizePolicy.Minimum,QSizePolicy.Expanding)
        Layout5.addItem(spacer)

        frmConnectLayout.addLayout(Layout5,0,1)

        self.grpConnection = QGroupBox(self,'grpConnection')
        self.grpConnection.setSizePolicy(QSizePolicy(5,7,self.grpConnection. \
        sizePolicy().hasHeightForWidth()))
        
        self.grpConnection.setTitle(self.tr(''))
        self.grpConnection.setColumnLayout(0,Qt.Vertical)
        self.grpConnection.layout().setSpacing(0)
        self.grpConnection.layout().setMargin(0)
        grpConnectionLayout = QGridLayout(self.grpConnection.layout())
        grpConnectionLayout.setAlignment(Qt.AlignTop)
        grpConnectionLayout.setSpacing(6)
        grpConnectionLayout.setMargin(11)

        self.lblName = QLabel(self.grpConnection,'lblName')
        self.lblName.setText(self.tr('&amp;Name'))

        grpConnectionLayout.addWidget(self.lblName,0,0)

        self.lblHost = QLabel(self.grpConnection,'lblHost')
        self.lblHost.setText(self.tr('&amp;Host'))

        grpConnectionLayout.addWidget(self.lblHost,2,0)

        self.lblPasswd = QLabel(self.grpConnection,'lblPasswd')
        self.lblPasswd.setText(self.tr('&amp;Password'))

        grpConnectionLayout.addWidget(self.lblPasswd,1,0)

        self.txtPasswd = QLineEdit(self.grpConnection,'txtPasswd')
        self.txtPasswd.setMaxLength(8)
        self.txtPasswd.setEchoMode(QLineEdit.Password)

        grpConnectionLayout.addWidget(self.txtPasswd,1,1)

        self.cmbHostnames = QComboBox(0,self.grpConnection,'cmbHostnames')

        grpConnectionLayout.addWidget(self.cmbHostnames,2,1)

        self.txtName = QLineEdit(self.grpConnection,'txtName')
        self.txtName.setMaxLength(8)

        grpConnectionLayout.addWidget(self.txtName,0,1)

        frmConnectLayout.addWidget(self.grpConnection,0,0)

        self.connect(self.buttonOk,SIGNAL('clicked()'),self,SLOT('accept()'))
        self.connect(self.buttonCancel,SIGNAL('clicked()'), \
        self,SLOT('reject()'))

        self.setTabOrder(self.txtName,self.txtPasswd)
        self.setTabOrder(self.txtPasswd,self.cmbHostnames)
        self.setTabOrder(self.cmbHostnames,self.buttonOk)
        self.setTabOrder(self.buttonOk,self.buttonCancel)
        self.setTabOrder(self.buttonCancel,self.buttonHelp)

        self.lblName.setBuddy(self.txtName)
        self.lblPasswd.setBuddy(self.txtName)
        </programlisting>
      </example>

    <indexterm>
  <primary>subclassing forms desigsn</primary>
  </indexterm>
  <indexterm>
  <primary>visual design</primary>
  </indexterm>
  <para id="para-ch1-60">Now this looks pretty hideous &mdash; but fortunately you'll
      never have to hack it. You would lose all your changes anyway, the
      next time you make a change to your design and regenerate the Python
      code. The best thing to do is to subclass this form with
      code that actually fills the dialog with data and perfoms an
      action upon closing it. I like to keep the names of the
      generated form and the subclassed form related, and I tend to
      refer to the first as a form, and the second as dialog &mdash;
      hence the prefix frmXXX for generated forms and dlgXXX for the
      dialogs.</para>

    <para id="para-ch1-61">For example:</para>

    <example<title>dlgconnect.py &mdash; the subclass of the generated form</title>
      <programlisting>
import sys
from qt import *

from frmconnect import frmConnect

class dlgConnect(frmConnect):

    def __init__(self, parent=None):
        frmConnect.__init__(self, parent)
        self.txtName.setText("Baldrick")
        for host in ["elizabeth","george", "melchett"]:
            self.cmbHostnames.insertItem(host)

    def accept(self):
        print self.txtName.text()
        print self.txtPasswd.text()
        print self.cmbHostnames.currentText()
        frmConnect.accept(self)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    QObject.connect(app, SIGNAL('lastWindowClosed()'),
                    app, SLOT('quit()'))
    win = dlgConnect()
    app.setMainWidget(win)
    win.show()
    app.exec_loop()
        </programlisting>
      </example>

    <para id="para-ch1-62">As you can see, we have subclassed the
      generated form. In the constructor, the various fields are
      filled with a bit of data. Note that we can simply use Python
      string objects in setText() methods. Qt uses a special string
      object, <classname>QString</classname> for all its textual data,
      but PyQt automatically translates both Python strings and Python
      unicode strings to these <classname>QString</classname> objects.
      There are some complications, which we deal with in
      <xref linkend="ch4">, but the translation is mostly
      transparent.</para>

    <para id="para-ch1-63">When you press the OK button, Qt calls the
      <function>accept()</function> method of the dialog class, in
      this case <classname>dlgConnect</classname>, which inherits
      <classname>frmConnect</classname>, which inherits
      <classname>QDialog</classname>. The
      <function>accept()</function> method prints out the contents of
      the fields. Then the <function>accept()</function> method of the
      parent class  &mdash; ultimately <classname>QDialog</classname>
      &mdash; is called, and the dialog is closed.</para>

  </sect1>

  <sect1>
    <title>Conclusion</title>

    <para id="para-ch1-64">In this chapter we've taken a first sip of
      developing with Python and PyQt, touching lightly on many
      subjects. In the rest of this part, we'll investigate these
      issues in depth. Then we will start building real software in
      Part III. If you get lost, you can always refer to the online
      documentation that comes with Qt or BlackAdder.
      <xref linkend="readingDocumentation">, Reading the Qt
      Documentation,  tells you how you can read the C++ class
      documentation with profit and pleasure.</para>

  </sect1>

 </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-general-insert-case:lower
sgml-default-dtd-file:"../chapter.ced"
End:
-->

