

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="c7878.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Gui Design in the Baroque Age</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Creating real applications with PyQt"
HREF="p4627.htm"><LINK
REL="PREVIOUS"
TITLE="Conclusion"
HREF="x7875.htm"><LINK
REL="NEXT"
TITLE="Faking it with bitmaps"
HREF="x7898.htm"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="x7875.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="x7898.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="CHAPTER"
><H1
>Chapter 22. Gui Design in the Baroque Age</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
><A href="c7878.htm#AEN7882">Types of gui customization</A
></DT
><DT
><A href="x7898.htm">Faking it with bitmaps</A
></DT
><DT
><A href="x7947.htm">Creating themes with QStyle</A
></DT
></DL
></DIV
><P
>One of the greatest achievements of GUI
    interfaces such as CDE, Windows or MacOS is the uniform look and
    feel of the applications. Once a user has learned to use one
    application effectively, he will be familiar with the way
    <SPAN
><I
CLASS="EMPHASIS"
>all</I
></SPAN
> applications work on that platform. Of
    course, there are also users who complain they forget exactly
    which application they are working with when all applications look
    the same. Be that as it may, the current trend, perhaps initiated
    with the wide variety of design for websites, is toward ever-more
    distinctive and baroque interfaces. Indeed, we seem to be entering
    the age of the &#8216;designer' interface, and PyQt offers everything we
    need to create database applications in the form of an audio rack
    or spreadsheets in the form of a medieval book of hours.</P
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Types of gui customization</A
></H1
><P
>Despite the slight banter in the
      introduction, there are many valid reasons to design a gui for
      your application that diverges from the platform standard. For
      instance, while a word processor shouldn't look like the desk of
      a medieval scribe, the paste-board gui used in an application
      like Adobe FrameMaker is very effective, especially since many
      layout designers are still familiar with the glue-and-scissors
      approach of creating a layout. Likewise, designing an mp3-player
      that looks a bit like an audio rack is effective (while making
      it look like an angry fish-eye is less so). Generally speaking,
      creating an interface that matches closely the real world
      experience of your users is a good idea.</P
><P
>There is another area where a custom gui
      would fit well: the general redesign, or
      <SPAN
><I
CLASS="EMPHASIS"
>theming</I
></SPAN
> of the whole set of widgets, to
      make them more esthetically pleasing to your users. Qt already
      offers a selection of those themes. Your user can decide whether
      they want their applications to look like Motif, CDE, Silicon
      Graphics IRIX, Windows 95 or MacOS 9. Offering this choice means
      that the applications you make can always blend in unobtrusively
      with the other applications your users use. A toolkit like
      Tkinter does not offer this advantage; a user will always be
      aware that he or she is not working with a application native to
      his computing environment.</P
><P
>There are two ways to create a totally
      custom interface. You can reimplement
      <TT
CLASS="CLASSNAME"
>QWidget</TT
> using pixmaps and masks, or you
      can use the PyQt <TT
CLASS="CLASSNAME"
>QStyle</TT
> mechanism to
      reimplement the drawing routines of the standard widgets like
      <TT
CLASS="CLASSNAME"
>QPushButton</TT
>.</P
><P
>The first solution is applicable for simple
      applications like audio players or for applications that need to
      be totally skinnable (again, like audio players). You need also
      to reimplement <TT
CLASS="CLASSNAME"
>QWidget</TT
> if you have
      designed a totally new type of widget, like Adobe did with the
      PageMager paste-board. (You can also simulate the pasteboard
      quite easily with <TT
CLASS="CLASSNAME"
>QCanvas</TT
>, but you might
      have an idea for a widget that's more complicated than
      this.)</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="x7875.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="x7898.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Conclusion</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="p4627.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Faking it with bitmaps</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
