

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="x5234.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Large projects</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Automatic testing with PyUnit"
HREF="c5064.htm"><LINK
REL="PREVIOUS"
TITLE="A more complicated test"
HREF="x5202.htm"><LINK
REL="NEXT"
TITLE="Testing signals and slots"
HREF="x5255.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="x5202.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 14. Automatic testing with PyUnit</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="x5255.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Large projects</A
></H1
><P
>In large projects, where you have many
      tests, you will want to automate the assembly of testsuite as
      much as possible. By creating a few Python scripts that work
      with standardized testsuites (e.g., the function that returns
      the testsuite is always <TT
CLASS="FUNCTION"
>module.suite()</TT
>),
      you can run all tests as often as you want to.</P
><P
>You can already nest testsuites out of the
      box, and by creating a master test class that reads a
      configuration file and constructs a master test-suite, you can
      test a whole system in one run.</P
><P
>Take the following definition file, for
      instance:</P
><PRE
CLASS="PROGRAMLISTING"
>#
# unittests - unittests for the whole system.
#
# dvt1 tests the creation of a docviewdoc
#dvt1.suite
# dvt2 tests a whole lot more
dvt2.suite
    </PRE
><P
>If you use the following script, then all
      tests that are defined in the form of module.function, where
      module is on the Python path and function returns a
      <TT
CLASS="CLASSNAME"
>TestSuite</TT
> object, will be combined in one
      mega-<TT
CLASS="CLASSNAME"
>TestSuite</TT
>.</P
><PRE
CLASS="PROGRAMLISTING"
>#
# systemtest.py - run all tests that are not commented out in unittests
#

import unittest

def suite():
    testSuite=unittest.TestSuite()
    f=open("unittests")
    for t in f.readlines():
        t=t.strip() # remove all whitespace
        if t[0]!="#": # a comment
            testSuite.addTest(unittest.createTestInstance(t))

    return testSuite


def main():
    runner = unittest.TextTestRunner()
    runner.run(suite())

if __name__=="__main__":
    main()
    </PRE
><P
>Note the use of the function
      <TT
CLASS="FUNCTION"
>unittest.createTestInstance</TT
>, which can
      create a testcase or testsuite from a simple string. There's an
      optional second argument, module, which points to the module
      where the test can be found.</P
><P
>Another function,
      <TT
CLASS="FUNCTION"
>unittest.makeSuite()</TT
> can scan a class for
      functions that begin with a certain prefix, and combine them
      into a testsuite. For instance, we could rewrite
      <TT
CLASS="FILENAME"
>dvt2.py</TT
> into:</P
><PRE
CLASS="PROGRAMLISTING"
>#
# dvt3.py - using makeSuite
#
import sys
import unittest
from docviewdoc import DocviewDoc

def divide(a, b):
    return a/b

class DocviewDocTestCase(unittest.TestCase):
    """DocviewDocTestCase test the DocviewDoc class.
    """
    def checkInstantion(self):
        """Check whether the document could be instantiated"""
        doc=None
        doc=DocviewDoc()
        assert doc!=None, 'Could not instantiate DocviewDoc'

    def checkModifiable(self):
        """Check whether the document could be modified"""
        doc=DocviewDoc()
        doc.slotModify()
        assert doc.isModified(), 'Document could not be modified'

def suite():
    testSuite=unittest.makeSuite(DocviewDocTestCase, "check")
    return testSuite

def main():
    runner = unittest.TextTestRunner()
    runner.run(suite())

if __name__=="__main__":
    main()
    </PRE
><P
>By always prefixing your tests with
      &#8216;check', you make sure they are all included. If you had
      to add every test by hand, it would be only natural to forget
      one or two over time. Eventually you would notice that a test
      was not being executed. By that time you might have changed the
      tested code so the original test fails. The purpose of unit
      testing is always to be sure that everything works as you think
      it should.</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="x5202.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="x5255.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>A more complicated test</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="c5064.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Testing signals and slots</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
