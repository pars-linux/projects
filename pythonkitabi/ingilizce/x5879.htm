

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="x5879.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>The document</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Creating Application Functionality"
HREF="c5783.htm"><LINK
REL="PREVIOUS"
TITLE="The view"
HREF="x5798.htm"><LINK
REL="NEXT"
TITLE="Saving and loading documents"
HREF="x5925.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="x5798.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 17. Creating Application Functionality</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="x5925.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>The document</A
></H1
><P
>The <TT
CLASS="CLASSNAME"
>KalamDocument</TT
>
      document class is a simple wrapper around a
      <TT
CLASS="CLASSNAME"
>QString</TT
> object. The reason for using a
      <TT
CLASS="CLASSNAME"
>QString</TT
> to hold all text, instead of a
      Python string object, is straight-forward: with all the passing
      around of strings, converting the
      <TT
CLASS="CLASSNAME"
>QString</TT
>s retrieved from the
      <TT
CLASS="CLASSNAME"
>QMultiLineEdit</TT
> widgets to Python strings
      would take far too much time. String conversion is a fairly
      costly operation, involving the copying of potentially large
      amounts of memory.</P
><P
>There is another reason for using
      <TT
CLASS="CLASSNAME"
>QString</TT
>in this manner: a
      <TT
CLASS="CLASSNAME"
>QString</TT
> is mutable, and a Python string
      not. This means, simply put, that every time you change a single
      character in a Python string, a complete new copy of the string
      is made, and the old copy is discarded.</P
><P
>There are good reasons for this behavior.
      If Python strings were mutable, they could not be used to index
      Python dictionaries based on their character value, but only on
      the abstract object ID that all Python objects receive. Imagine
      the mess you would have if you changed the actual value of a key
      in a dictionary.</P
><P
><TT
CLASS="CLASSNAME"
>QString</TT
> is a clever
      and optimized class. If two instances of
      <TT
CLASS="CLASSNAME"
>QString</TT
> have the same contents, there is
      a good chance that they will even share the memory needed to
      store the actual text. Furthermore,
      <TT
CLASS="CLASSNAME"
>QString</TT
> offers as rich a set of methods
      to mangle strings as Python does, so we don't lose much
      functionality. (But look carefully at the documentation for
      <TT
CLASS="CLASSNAME"
>QString</TT
> &#8212; some functions, such as
      <TT
CLASS="FUNCTION"
>stripWhiteSpace()</TT
>, return a new string
      instead of working on the existing string.)</P
><P
>Would our editor have to store more
      complex information, instead of plain text, we should use the
      <TT
CLASS="CLASSNAME"
>KalamDocument</TT
> class to store its data
      perhaps in a list of paragraphs, where each paragraph is a list
      itself, containing words, lines and perhaps more complex
      objects, such as images or even active widgets &#8212; so you
      could embed a button or a hyperlink in your text. However, never
      code what you don't yet need is a excellent motto...</P
><PRE
CLASS="PROGRAMLISTING"
>"""
kalamdoc.py - abstraction of a document with a certain encoding

copyright: (C) 2001, Boudewijn Rempt
email:     boud@rempt.xs4all.nl
"""
from qt import *
from resources import TRUE, FALSE

class KalamDoc(QObject):
    """
    The document represents a plain text with a certain encoding. Default
    is Unicode.

    signals: sigDocModified (boolean)
             sigDocTitleChanged (string)
             sigDocTextChanged (qstring, qwidget)

    """
    def __init__(self, *args):
        apply(QObject.__init__, (self,)+args)
        self.encoding="unicode"
        self.newDocument()
        self._fileName = None
        self._title = "Untitled"
        self._modified = FALSE
        self._text = QString()
    </PRE
><P
>Instead of wrapping a simple, silly
      boolean value, we now wrap s single
      <TT
CLASS="CLASSNAME"
>QString</TT
> object.</P
><PRE
CLASS="PROGRAMLISTING"
>    def setText(self, text, view=None):
        self._text=text
        self._modified=TRUE
        self.emit(PYSIGNAL("sigDocTextChanged"),
                  (self._text, view))
    </PRE
><P
>Most of the above functions haven't
      changed the basic framework. Note that the
      <TT
CLASS="FUNCTION"
>slotModified</TT
> function has disappeared.
      Modifying a text isn't as simple as flipping a single
      boolean.</P
><P
>The <TT
CLASS="FUNCTION"
>setText</TT
> function,
      which is called from the <TT
CLASS="CLASSNAME"
>KalamView</TT
> class,
      applies brute force to the text that
      <TT
CLASS="CLASSNAME"
>KalamDocument</TT
> manages.  Quite simply,
      <TT
CLASS="FUNCTION"
>setText</TT
> replaces the internal reference to
      <TT
CLASS="CLASSNAME"
>QString</TT
> with a reference to the
      <TT
CLASS="CLASSNAME"
>QString</TT
> that was presented by the calling
      view. The text has been modified, and this is recorded in the
      administrative <TT
CLASS="VARNAME"
>_modified</TT
> variable. Finally,
      by emitting the <TT
CLASS="VARNAME"
>"sigDocTextChanged"</TT
> Python
      signal, all views that show this document are told to update
      their display.</P
><P
>The <TT
CLASS="VARNAME"
>view</TT
> parameter has
      a default value of <TT
CLASS="VARNAME"
>None</TT
> &#8212; this means
      the change does not originate with any view, and will be applied
      to all views.</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="x5798.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="x5925.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>The view</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="c5783.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Saving and loading documents</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
