

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=x5925.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Saving and loading documents</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Creating Application Functionality"
HREF="c5783.htm"><LINK
REL="PREVIOUS"
TITLE="The document"
HREF="x5879.htm"><LINK
REL="NEXT"
TITLE="Undo, redo and other editing functions"
HREF="x5968.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=x5879.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 17. Creating Application Functionality</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=x5968.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Saving and loading documents</A
></H1
><P
>What's the use of an editor if it can't
      load and save texts? It would be of no use at all&#8212; and
      thus it is high time that we implemented this essential
      functionality. Loading and saving are part of the
      <TT
CLASS="CLASSNAME"
>KalamDocument</TT
> class. First, we need to
      decide if we will make use of the special PyQt file classes, or
      of the generic Python file classes. Let's do both for now, and
      you can choose which style you prefer.</P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>Loading</A
></H2
><P
>Loading first:</P
><PRE
CLASS="PROGRAMLISTING"
>    def open(self, fileName, format=None):
        self.setPathName(fileName)
        f = QFile(fileName)
        if f.exists():
            f.open(IO_ReadOnly)
            self.setText(QTextStream(f).read())
        else:
            raise IOError("No such file or directory: '%s'" % fileName)
        self._modified=FALSE
      </PRE
><P
>This is the Qt way of doing things:
        first, a <TT
CLASS="CLASSNAME"
>QFile</TT
> object is created. If a
        file with the name <TT
CLASS="VARNAME"
>fileName</TT
> already exists,
        a <TT
CLASS="CLASSNAME"
>QTextStream</TT
> is used to read the text
        from the file. This text is read into a
        <TT
CLASS="CLASSNAME"
>QString</TT
> object, which is passed on to
        <TT
CLASS="FUNCTION"
>setText</TT
>, which we saw above. If the file
        doesn't exist, an exception is raised, which is caught in the
        application class, <TT
CLASS="CLASSNAME"
>KalamApp</TT
>. </P
><P
>The Pythonic method is a lot shorter:</P
><PRE
CLASS="PROGRAMLISTING"
>    def open(self, fileName, format=None):
        self.setPathName(fileName)
        self.setText(QString(open(str(fileName)).read()))
        self._modified=FALSE
      </PRE
><P
>The net result is the same: the document
        receives a text in <TT
CLASS="CLASSNAME"
>QString</TT
> format, and
        all views are updated. There is no appreciable difference in
        performance between these two methods, but if you plan to
        translate the Python application to C++ at some time, it might
        be preferable to work with as many Qt classes as
        possible.</P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>Saving</A
></H2
><P
>Saving text is slightly more critical
        than loading: what you can't load, you can't mangle and lose,
        but if the application refuses to save a text, a user can lose
        a lot of work. Still, there is little you can do when the disk
        is full, beyond preventing the application from crashing. As
        long as <SPAN
CLASS="APPLICATION"
>Kalam</SPAN
> is running, users can still
        select, copy and paste text - a lesson I learned with early
        versions of Word.  Note that saving using
        <TT
CLASS="CLASSNAME"
>QTextStream</TT
> is not currently possible.
        <TT
CLASS="CLASSNAME"
>QTextStream</TT
> uses C++ operator
        overloading (i.e. &#60;&#60;) to write to a stream, which is not
        yet available in Python.</P
><PRE
CLASS="PROGRAMLISTING"
>    def save(self, fileName = None, format = None):
        if fileName is not None and fileName &#60;&#62; "":
            self.setPathName(fileName)

        if self.pathName() == None:
            raise IOError("Could not save document: no filename.")

        if isinstance(self.pathName(), QString):
            self.setPathName(str(self.pathName()))

        s=str(self.text())

        f = open(self.pathName(), "w")
        f.write(s)

        if s[-1:] != "\n":
            f.write("\n")
        f.flush()

        self._modified = FALSE
      </PRE
><P
>There are a few necessary checks to
        perform. The first is to make sure that the document actually
        possesses a filename; then we check whether the filename is an
        instance of <TT
CLASS="CLASSNAME"
>QString</TT
>, instead of a
        Python string. Python's file object cannot use
        <TT
CLASS="CLASSNAME"
>QString</TT
>s &#8212; it needs to have a
        genuine Python string. So, if the pathname is an instance of
        <TT
CLASS="CLASSNAME"
>QString</TT
>, it is converted to a Python
        string.</P
><P
>The document text is then converted to a
        Python string. A Python file object is created by using the
        <TT
CLASS="FUNCTION"
>open</TT
> function, and we write the string to
        it. If the last character is not a newline, we write a last
        newline and flush the file. It is a good idea to end all files
        with a newline, though you may wish to make this is a
        user-option in the application.</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=x5879.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=x5968.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>The document</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=c5783.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Undo, redo and other editing functions</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
