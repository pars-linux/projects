

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=x2629.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Base classes</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Qt Class Hierarchy"
HREF="c2591.htm"><LINK
REL="PREVIOUS"
TITLE="Qt Class Hierarchy"
HREF="c2591.htm"><LINK
REL="NEXT"
TITLE="Application classes"
HREF="x2693.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=c2591.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 10. Qt Class Hierarchy</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=x2693.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Base classes</A
></H1
><P
>You won't often create objects from Qt base classes,
      but you might need to subclass QObject now and then. The basic
      classes that Qt is built on are QObject and QEvent. There are several
      other classes used for the construction of high-level datatypes,
      and a large number of other classes that support working with,
      for instance, fonts, images and colors.</P
><P
>QObject brings together support for: </P
><P
></P
><UL
><LI
><P
>Signals and slots</P
></LI
><LI
><P
>Timers</P
></LI
><LI
><P
>Object ownership hierarchy</P
></LI
><LI
><P
>Event handling and event filters</P
></LI
><LI
><P
>Introspection</P
></LI
><LI
><P
>Properties</P
></LI
></UL
><P
>Signals and slots are meant for communication between
      objects&#8212;for instance, when a button is pressed, certain other
      objects must be notified. Events, on the other hand, notify
      objects of general actions of the user, such as key presses
      or mouse movements; events do not necessarily originate with
      objects.</P
><P
>The linchpin of the event handling mechanism is the class
      representing the information associated with an event, such as
      the position of the mouse. This is the QEvent class; there are a
      whole slew of specialized subclasses like QPaintEvent,
      QFocusEvent, QMouseEvent, QWheelEvent and QKeyEvent that do the
      rounds of all interested objects. For instance, a keypress is
      first passed to the application object, based on QApplication.
      From there it trickles down the whole widget ownership hierarchy
      until one widget &#8216;consumes' it &#8212;that is, reacts to the event and doesn't
      send it on by calling the <TT
CLASS="FUNCTION"
>event(QEvent)</TT
>
      method.</P
><P
>See the next listing for an example of reacting to mouse
      presses and movements. Note also that if the window is
      obscured and remapped, the paintEvent method is fired&#8212;
      this will obliterate your whole beautiful drawing.</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-1. event1.py - handling mouse events in PyQt</B
></P
><PRE
CLASS="PROGRAMLISTING"
>#
# event1.py
#
from qt import *
import sys

class Painting(QWidget):

    def __init__(self, *args):
        apply(QWidget.__init__,(self, ) + args)

    def paintEvent(self, ev):
        self.p = QPainter()
        self.p.begin(self)
        self.p.fillRect(self.rect(), QBrush(Qt.white))
        self.p.flush()
        self.p.end()

    def mouseMoveEvent(self, ev):
        self.p = QPainter()
        self.p.begin(self)
        self.p.drawLine(self.currentPos, ev.pos())
        self.currentPos=QPoint(ev.pos())
        self.p.flush()
        self.p.end()

    def mousePressEvent(self, ev):
        self.p = QPainter()
        self.p.begin(self)
        self.p.drawPoint(ev.pos())
        self.currentPos=QPoint(ev.pos())

        self.p.flush()
        self.p.end()

class MainWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.painting=Painting(self)
        self.setCentralWidget(self.painting)

def main(args):
    app=QApplication(args)
    win=MainWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

if __name__=="__main__":
    main(sys.argv)
      </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>event1.py</P
></DIV
></P
></DIV
><P
>In handling methods such as <TT
CLASS="FUNCTION"
>mousePressEvent()</TT
>,
      It is customary to use <TT
CLASS="PARAMETER"
><I
>ev</I
></TT
> as the name
      for the <TT
CLASS="CLASSNAME"
>QEvent</TT
> parameter. In
      this example, all mouse press events and mouse move events are
      consumed by the <TT
CLASS="CLASSNAME"
>Painting</TT
> class.</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=c2591.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=x2693.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Qt Class Hierarchy</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=c2591.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Application classes</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
