

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=x2693.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Application classes</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Qt Class Hierarchy"
HREF="c2591.htm"><LINK
REL="PREVIOUS"
TITLE="Base classes"
HREF="x2629.htm"><LINK
REL="NEXT"
TITLE="Widget foundations: QWidget"
HREF="x2765.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=x2629.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 10. Qt Class Hierarchy</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=x2765.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Application classes</A
></H1
><P
>Most gui applications consist of a main
      window embellished with toolbars, a menu bar, and a statusbar,
      and have a hole in the middle. The hole in the middle can be
      filled with a specialized widget, or it may be a sort of
      desktop-in-a- desktop, with its own windows, and with
      sub-windows that dock themselves to the sides of the main
      window. Often, and application includes a few secondary windows,
      dialogs and a number of small popup-windows that warn or inform
      the user.</P
><P
>We have already worked with a few of these
      components. There is <TT
CLASS="CLASSNAME"
>QApplication</TT
>, the
      base of every PyQt application.
      <TT
CLASS="CLASSNAME"
>QApplication</TT
> wants to receive the
      command-line arguments to determine the look and feel of the
      application, as shown in
      <A href="index.lxp%3Flxpwrap=x1067.htm">the Section called <I
>As simple as they come</I
> in Chapter 6</A
>.</P
><P
>Then there's the main window &#8212; as
      shown in <A href="index.lxp%3Flxpwrap=x1149.htm">the Section called <I
>A better Hello World</I
> in Chapter 6</A
>, you can have
      an unlimited number of main windows, and not all those main
      windows have to be of the same class, as long as they inherit
      <TT
CLASS="CLASSNAME"
>QMainWindow</TT
>.</P
><P
>We have yet to add the frills to the main
      window. PyQt makes it quite easy to do this. The best way of
      adding menu options and toolbar buttons is to create a
      <TT
CLASS="CLASSNAME"
>QAction</TT
> for each action.
      <TT
CLASS="CLASSNAME"
>QAction</TT
> is a class that brings together
      user interface information about a certain action the user can
      undertake in your application.</P
><P
>For instance, if you're developing a network client
      application, one of the actions could be the command to
      <B
CLASS="COMMAND"
>log in</B
>. Associated with this command
      is a short help text that appears as a tooltip, a longer
      help text that might appear in the status bar, an icon that is
      used in the toolbar, a short text for use in the menu, and an
      accelerator key that is used from the keyboard. The <B
CLASS="COMMAND"
>log in</B
>
      action can be enabled or disabled (when the network is down, for
      instance). You do not want to distribute all this functionality
      all over your application.</P
><P
>A <TT
CLASS="CLASSNAME"
>QAction</TT
> ties everything related to
      an action together, and can be added to toolbars and menus.
      When performed, a <TT
CLASS="CLASSNAME"
>QAction</TT
> emits an <TT
CLASS="FUNCTION"
>activated()</TT
>
      signal. The following is a simple example with an action, a menubar, a toolbar
      and a statusbar:</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-2. action.py - Using a QAction to group data associated with
        user commands</B
></P
><PRE
CLASS="PROGRAMLISTING"
>#
# action.py
#

import sys
from qt import *

connectIcon=["16 14 5 1",
             " 	c None",
             ".	c black",
             "X	c gray50",
             "o	c red",
             "O	c yellow",
             "                ",
             "          .     ",
             "       X .X     ",
             "      XooX  .   ",
             "     Xoooo .X   ",
             "    XooooooX    ",
             "    XooooooX    ",
             "    XoooooX.    ",
             "    XooooX.     ",
             "   XOXXXX.      ",
             "  XOXX...       ",
             " XOXX           ",
             "  XX            ",
             "  X             "
             ]

class MainWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self, ) + args)
        self.setCaption("Network Client")

        # Define action
        self.action=QAction(self, "login")
        self.action.setText("Log in")
        self.action.setMenuText("&#38;Login")
        self.action.setToolTip("Login to the central server")
        self.action.setWhatsThis("Logs in to the central server.")
        self.action.setStatusTip("Log in to the central server.")
        self.action.setAccel(Qt.CTRL + Qt.Key_L)
        self.action.setIconSet(QIconSet(QPixmap(connectIcon)))
        self.connect(self.action,
                     SIGNAL("activated()"),
                     self.slotAction)


        # Statusbar
        self.statusBar=QStatusBar(self)

        # Define menu
        self.menu=QPopupMenu()
        self.action.addTo(self.menu)
        self.menuBar().insertItem("&#38;File", self.menu)

        # Define toolbar
        self.toolBar=QToolBar(self, 'Main')
        self.action.addTo(self.toolBar)

        # Set a central widget
        self.editor=QMultiLineEdit(self)
        self.setCentralWidget(self.editor)

    def slotAction(self):
        QMessageBox.information(self,
                                "Network Client",
                                "Connecting to server...")

def main(args):
    app=QApplication(args)
    win=MainWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()")
                , app
                , SLOT("quit()")
                )
    app.exec_loop()

if __name__=="__main__":
        main(sys.argv)
      </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>action.py</P
></DIV
></P
></DIV
><P
>When, in <A href="index.lxp%3Flxpwrap=c8100.htm">Chapter 24</A
>, we reach
      the pinnacle of development of <SPAN
CLASS="APPLICATION"
>Kalam</SPAN
>,
      the extensible Unicode editor, you will have become
      <SPAN
><I
CLASS="EMPHASIS"
>very</I
></SPAN
> familiar with
      <TT
CLASS="CLASSNAME"
>QAction</TT
>.</P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>Multiple document windows with QWorkspace</A
></H2
><P
>The MDI (multiple document interface) is
        a paradigm made popular by Microsoft, in which one application
        window contains several document windows. For certain classes
        of application, such as programming editors, this is a very
        comfortable paradigm, but most users tend to get very confused
        when confronted with windows that don't show up in their
        taskbar. In fact, a large percentage of users have trouble
        when there is more than one window on their desktop.</P
><P
>However, the functionality is available,
        and it might be useful for <SPAN
><I
CLASS="EMPHASIS"
>your</I
></SPAN
>
        application. Let's take our high-powered graphics editor, from
        the event1.py example, and give the user ten windows to
        scribble in. All that is needed is it to add the
        <TT
CLASS="CLASSNAME"
>Painting</TT
> to a
        <TT
CLASS="CLASSNAME"
>QWorkspace</TT
> object, instead of setting
        it as the central widget of the
        <TT
CLASS="CLASSNAME"
>MainWindow</TT
>.</P
><P
>Realistically, you'll want to offer menu
        options for selecting, tiling and cascading the windows.
        <TT
CLASS="CLASSNAME"
>QWorkSpace</TT
> provides a
        <TT
CLASS="FUNCTION"
>tile()</TT
> and a
        <TT
CLASS="FUNCTION"
>cascade()</TT
> slot for these purposes, as
        well as a <TT
CLASS="FUNCTION"
>windowList</TT
> that returns a list
        of all windows. While it is a bad idea to limit your users to
        a small maximum number of documents, if you let them open
        more, you should provide a separate window with a full list.
        Having more than ten windows to select from in a menu makes
        working difficult.</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-3. fragment from mdi.py - ten little scribbling windows</B
></P
><PRE
CLASS="PROGRAMLISTING"
>...
class MainWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.setCaption("MDI Scribbler")
        self.workspace=QWorkspace(self, "workspace")
        self.winlist=[]
        for i in range(10):
            win=Painting(self.workspace)
            win.resize(100,100)
            win.setCaption("Window " + str(i))
            self.winlist.append(win)
        self.setCentralWidget(self.workspace)
...
        </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>mdi.py - ten little scribbling windows.</P
></DIV
></P
></DIV
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=x2629.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=x2765.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Base classes</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=c2591.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Widget foundations: QWidget</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
