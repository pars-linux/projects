

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=x3581.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Dialogs and Standard Dialogs</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Qt Class Hierarchy"
HREF="c2591.htm"><LINK
REL="PREVIOUS"
TITLE="Layout managers"
HREF="x3410.htm"><LINK
REL="NEXT"
TITLE="Qt Utility classes and their Python equivalents"
HREF="x3738.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=x3410.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 10. Qt Class Hierarchy</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=x3738.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Dialogs and Standard Dialogs</A
></H1
><P
>Bill Gates is apocryphically reported to
      have once shouted &#8216;Why must everyone in my company write
      his own file-open code? Go and build something that works for
      <SPAN
><I
CLASS="EMPHASIS"
>every</I
></SPAN
> application!". And thus the Windows
      standard file open dialog was born. This dialog has gone through
      several versions, necessitating continuous rewriting. All the
      same, the idea was a good idea, and Qt implements several
      standard dialogs that look and feel just like the Windows common
      dialogs, but are a lot easier to program.  We'll implement
      common dialog PyQt lacks, for searching and replacing, in
      <A href="index.lxp%3Flxpwrap=x6734.htm">the Section called <I
>Non-modal: Search and
      replace</I
> in Chapter 19</A
>, Using Dialog
      Windows.</P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QDialog</A
></H2
><P
><TT
CLASS="CLASSNAME"
>QDialog</TT
> is the
        parent of all dialog classes. A dialog window is a window that
        pops up over the application window. These can be modal (where
        it will block the rest of the application) or modeless (where
        the user can continue working in the main screen of the
        application). Dialogs are commonly closed with OK or Cancel
        buttons. There is no reason to make a dialog a fixed size; you
        can give it a <TT
CLASS="CLASSNAME"
>QSizeGrip</TT
>, and if you use
        <TT
CLASS="CLASSNAME"
>QLayout</TT
> layout management, the contents
        will be resized quite nicely. A modal dialog has its own
        <TT
CLASS="FUNCTION"
>exec_loop</TT
>; a modeless dialog can be
        constructed, shown, and hidden, but is part of its parents
        event loop.
        </P
><P
>Of course, there are many other
        occasions where you will want to create custom dialog boxes.
        PyQt provides for plain dialog boxes, expanding dialog boxes,
        tabbed dialog boxes and wizards.</P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QMessageBox</A
></H2
><P
>A QMessageBox is a very simple
        standard dialog class. Message boxes are always modal, and can
        be used to inform, warn or frighten the user. Message texts
        should preferably short, specific, and as non-threatening as
        possible.</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-14. dialogs.py - opening message and default dialogs boxes
          </B
></P
><PRE
CLASS="PROGRAMLISTING"
>#
# dialogs.py
#

import sys
from qt import *

class MainWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self, ) + args)
        self.setCaption("Network Client")

        self.actionInformation=QAction(self, "Information")
        self.actionInformation.setText("Informational Message")
        self.actionInformation.setMenuText("&#38;Information")
        self.actionInformation.setStatusTip("Show an informational mesagebox.")

        self.connect(self.actionInformation,
                     SIGNAL("activated()"),
                     self.slotInformation)


        self.actionWarning=QAction(self, "Warning")
        self.actionWarning.setText("Warning Message")
        self.actionWarning.setMenuText("&#38;Warning")
        self.actionWarning.setStatusTip("Show a warning mesagebox.")

        self.connect(self.actionWarning,
                     SIGNAL("activated()"),
                     self.slotWarning)

        self.actionCritical=QAction(self, "Critical")
        self.actionCritical.setText("Critical Message")
        self.actionCritical.setMenuText("&#38;Critical")
        self.actionCritical.setStatusTip("Show an informational mesagebox.")


        self.connect(self.actionCritical,
                     SIGNAL("activated()"),
                     self.slotCritical)

        self.actionAbout=QAction(self, "About")
        self.actionAbout.setText("About")
        self.actionAbout.setMenuText("&#38;About")
        self.actionAbout.setStatusTip("Show an about box.")

        self.connect(self.actionAbout,
                     SIGNAL("activated()"),
                     self.slotAbout)


        self.actionAboutQt=QAction(self, "AboutQt")
        self.actionAboutQt.setText("About Qt Message")
        self.actionAboutQt.setMenuText("About &#38;Qt")
        self.actionAboutQt.setStatusTip("Show an about box for Qt.")

        self.connect(self.actionAboutQt,
                     SIGNAL("activated()"),
                     self.slotAboutQt)



        self.actionFile=QAction(self, "OpenFile")
        self.actionFile.setText("Open File")
        self.actionFile.setMenuText("&#38;Open")
        self.actionFile.setStatusTip("Open a file.")

        self.connect(self.actionFile,
                     SIGNAL("activated()"),
                     self.slotFile)



        self.actionFont=QAction(self, "Font")
        self.actionFont.setText("Select a font")
        self.actionFont.setMenuText("&#38;Font")
        self.actionFont.setStatusTip("Select a font")

        self.connect(self.actionFont,
                     SIGNAL("activated()"),
                     self.slotFont)



        self.actionColor=QAction(self, "Color")
        self.actionColor.setText("Select a color")
        self.actionColor.setMenuText("&#38;Color")
        self.actionColor.setStatusTip("Select a color")

        self.connect(self.actionColor,
                     SIGNAL("activated()"),
                     self.slotColor)


        # Statusbar
        self.statusBar=QStatusBar(self)

        # Define menu

        self.messageMenu=QPopupMenu()

        self.actionInformation.addTo(self.messageMenu)
        self.actionWarning.addTo(self.messageMenu)
        self.actionCritical.addTo(self.messageMenu)

        self.dialogMenu=QPopupMenu()
        self.actionFile.addTo(self.dialogMenu)
        self.actionFont.addTo(self.dialogMenu)
        self.actionColor.addTo(self.dialogMenu)

        self.helpMenu=QPopupMenu()
        self.actionAbout.addTo(self.helpMenu)
        self.actionAboutQt.addTo(self.helpMenu)

        self.menuBar().insertItem("&#38;Messages", self.messageMenu)
        self.menuBar().insertItem("&#38;Standard dialogs", self.dialogMenu)
        self.menuBar().insertItem("&#38;Help", self.helpMenu)

    def slotInformation(self):
        QMessageBox.information(self,
                                "Information",
                                "A plain, informational message")

    def slotWarning(self):
        QMessageBox.warning(self,
                            "Warning",
                            "What you are about to do will do some serious harm .")


    def slotCritical(self):
        QMessageBox.critical(self,
                                "Critical",
                                "A critical error has occurred.\nProcessing will be stopped!")

    def slotAbout(self):
        QMessageBox.about(self,
                          "About me",
                          "A demo of message boxes and standard dialogs.")

    def slotAboutQt(self):
        QMessageBox.aboutQt(self)


    def slotFile(self):
        filename=QFileDialog.getOpenFileName("", "*.py", self, "FileDialog")

    def slotFont(self):
        (font, ok) = QFontDialog.getFont(self, "FontDialog")

    def slotColor(self):
        color=QColorDialog.getColor(QColor("linen"), self, "ColorDialog")


def main(args):
    app=QApplication(args)
    win=MainWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()")
                , app
                , SLOT("quit()")
                )
    app.exec_loop()

if __name__=="__main__":
        main(sys.argv)
          </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>Giving the user some information.</P
></DIV
></P
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>A gentle warning</P
></DIV
></P
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>A dire warning</P
></DIV
></P
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>About your application</P
></DIV
></P
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>About Qt</P
></DIV
></P
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QTabDialog</A
></H2
><P
>One of the best ways to organize a
        multitude of options is to group them together and show the
        user only the pertinent set, hiding the rest between tabs.
        Usability studies have shown that a moderate number of tabs,
        presented in a single row showing all available tabs at one
        time, promotes the greatest usability. Twenty tabs in three
        rows confuse the user; one scrolling row of twenty tabs
        irritates the user. I have once used tabs within tabs myself,
        but it's not something I'd recommend.
        </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QWizard</A
></H2
><P
>Complex, infrequent actions are
        eminently suited to the wizard approach. A wizard is a set of
        pages that guide the user through a certain path. The user
        need not visit all pages, and there might be more than one
        possible path. Avoid using wizards where tab pages might be
        more suited (when there are many options but no clear
        progression through the steps of a complex action).
        </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QFileDialog</A
></H2
><P
>The first of the Qt standard dialogs is the
        <TT
CLASS="CLASSNAME"
>QFileDialog</TT
>. The file dialog can be
        extended with custom icons, toolbuttons and extra widgets.
        In its default format it is
        extremely easy to use: just call one of the predefined class
        methods that return the name of a directory or file, such as
        <TT
CLASS="FUNCTION"
>getOpenFileName()</TT
> or
        <TT
CLASS="FUNCTION"
>getOpenFileNames()</TT
>.
        </P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-15. fragment from dialogs.py - opening a file dialog
          </B
></P
><PRE
CLASS="PROGRAMLISTING"
>...
    def slotFile(self):
        filename=QFileDialog.getOpenFileName("", "*.py", self, "FileDialog")
...
        </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>The Qt File dialog</P
></DIV
></P
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QFontDialog</A
></H2
><P
>A useful dialog,
        <TT
CLASS="CLASSNAME"
>QFontDialog</TT
> lets the user select a font
        by giving parameters for font name, style, size, effects and
        script &#8212; this last parameter being the encoding of the
        font, such as Unicode. Just as with
        <TT
CLASS="CLASSNAME"
>QFileDialog</TT
>,
        <TT
CLASS="CLASSNAME"
>QFontDialog</TT
> provides a set of class
        methods that return the selected value, in this case a tuple
        containing a <TT
CLASS="CLASSNAME"
>QFont</TT
> object and a boolean
        value that indicates whether OK or Cancel was pressed..
        </P
><P
>Of course, with Qt3, you no longer set
        the desired encoding, but rather the script - Greek, Tamil, or
        whatever you want.</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-16. fragment from dialogs.py - opening a font dialog
          </B
></P
><PRE
CLASS="PROGRAMLISTING"
>...
    def slotFont(self):
        (font, ok) = QFontDialog.getFont(self, "FontDialog")
...
          </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>The Qt font dialog</P
></DIV
></P
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QColorDialog</A
></H2
><P
><TT
CLASS="CLASSNAME"
>QColorDialog</TT
>
        provides a standard dialog for color selection. An interesting
        addition to this class is that you ask it to store a set of
        custom colors. This set will be kept during the lifetime of
        the application, and you can store those colors in a
        configuration file and restore them when the app is restarted.
        You can ask the color dialog either for a
        <TT
CLASS="CLASSNAME"
>QColor</TT
> object, or for a set of RGB
        values, encapsulated in a <TT
CLASS="CLASSNAME"
>QRgb</TT
> object.
        In contrast with <TT
CLASS="CLASSNAME"
>QFileDialog</TT
>, which is
        extensible, or <TT
CLASS="CLASSNAME"
>QFontDialog</TT
>, which
        really suffices, <TT
CLASS="CLASSNAME"
>QColorDialog</TT
> provides
        just barely enough for simple color selection, but won't do
        for more complex graphics applications (with which you might
        want to implement something that works with HSV values, or
        with a color wheel).
        </P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 10-17. fragment from dialogs.py - opening a color dialog
          </B
></P
><PRE
CLASS="PROGRAMLISTING"
>...
    def slotColor(self):
        color=QColorDialog.getColor(QColor("linen"), self, "ColorDialog")
...
          </PRE
></DIV
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>The Qt Color dialog</P
></DIV
></P
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QInputDialog</A
></H2
><P
>You can use
        <TT
CLASS="CLASSNAME"
>QInputDialog</TT
> to ask the user for a
        simple, single value. This value can be of the following type:
        text, integer, double, or an item from a listbox. Frankly,
        I've never had a need for these. The open remote location
        dialog in browsers like Opera or Netscape are a common
        example.
        </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
>QProgressDialog</A
></H2
><P
>The
        <TT
CLASS="CLASSNAME"
>QProgressDialog</TT
> is a useful little
        dialog that can be used to inform the user that a certain
        action will be taking a lot of time. If the operation of the
        dialog is meant to block the whole application, use a modal
        <TT
CLASS="CLASSNAME"
>QprogressDialog</TT
>. If the operation won't
        block the entire application, then it's possible to use a
        modeless <TT
CLASS="CLASSNAME"
>QProgressDialog</TT
>, but it may be
        more effective to use a <TT
CLASS="CLASSNAME"
>QProgressBar</TT
> in
        the statusbar of the application.
        <TT
CLASS="CLASSNAME"
>QProgressDialog</TT
> is based on the
        <TT
CLASS="CLASSNAME"
>QSemiModal</TT
> class.
      </P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=x3410.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=x3738.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Layout managers</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=c2591.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Qt Utility classes and their Python equivalents</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
