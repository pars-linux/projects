

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="x1067.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>      As simple as they come
    </TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Qt Concepts"
HREF="c1036.htm"><LINK
REL="PREVIOUS"
TITLE="Qt Concepts"
HREF="c1036.htm"><LINK
REL="NEXT"
TITLE="      A better Hello World
    "
HREF="x1149.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="c1036.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 6. Qt Concepts</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="x1149.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>As simple as they come</A
></H1
><P
>Nothing like getting the feet wet: let's investigate the
      structure of a PyQt application by putting together the minimal
      set of components that can show something on screen, slowly
      expanding it to show more features.</P
><P
>A tiny PyQt applications has the following elements:</P
><P
></P
><UL
><LI
><P
>          an application object
        </P
></LI
><LI
><P
>          a main window (which has a central widget), <SPAN
><I
CLASS="EMPHASIS"
>or</I
></SPAN
>
        </P
></LI
><LI
><P
>          a main widget
        </P
></LI
></UL
><P
>This is the traditional &#8221;Hello World&#8221; button
      application, with as little code as possible:</P
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>Hello World</P
></DIV
></P
></DIV
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 6-1. hello1.py &#8212; hello world</B
></P
><PRE
CLASS="PROGRAMLISTING"
>#
# hello1.py
#
import sys                                                 <IMG
SRC="images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
>
from qt import *                                           <IMG
SRC="images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
>

app=QApplication(sys.argv)                                 <IMG
SRC="images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
>
button=QPushButton("Hello World", None)                    <IMG
SRC="images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
>
app.setMainWidget(button)                                  <IMG
SRC="images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
>
button.show()                                              <IMG
SRC="images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
>
app.exec_loop()                                            <IMG
SRC="images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
>
        </PRE
><DIV
CLASS="CALLOUTLIST"
><DL
COMPACT="COMPACT"
><DT
><A href="x1067.htm#HELLO1IMPSYS"><IMG
SRC="images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
></DT
><DD
>We need to import the Python
              <SPAN
><I
CLASS="EMPHASIS"
>sys</I
></SPAN
> package, because the
              <TT
CLASS="CLASSNAME"
>QApplication</TT
> object wants to look
              at the command-line arguments the script is started
              with. For instance, starting the script with
              <TT
CLASS="USERINPUT"
><B
>python hello1.py -style=platinum</B
></TT
>
              starts the script with the look and feel of Mac-OS 8.5,
              by passing the &#8220;-style=platinum&#8221; option
              through to the QApplication object.</DD
><DD
><P
>One of the niceties of Qt is that
              you have access to all supported widget styles on all
              platforms. (Except for the Aqua style - that is only
              available on OS X, because Apple doesn't want it to
              spread to other platforms.)</P
></DD
><DT
><A href="x1067.htm#HELLO1IMPQT"><IMG
SRC="images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
></DT
><DD
>Next, we have to import the qt
              library. While it is possible to import only explicitly
              the elements from the library we need, it's just as easy
              and efficient to import the whole library. But we could
              have said: <PRE
CLASS="PROGRAMLISTING"
> from qt import QApplication,
                QPushButton </PRE
>
            </DD
><DD
><P
>From version 3.x of PyQt, the
              library has been split into several separate modules.
              The <TT
CLASS="VARNAME"
>Qt</TT
> module still gets you all the
              basic stuff, but more advanced functionality, such as
              the canvas, is divided over separate modules,
              <TT
CLASS="VARNAME"
>qtcanvas</TT
> for
              <TT
CLASS="CLASSNAME"
>QCanvas</TT
>, for instance.</P
></DD
><DT
><A href="x1067.htm#HELLO1CREATEAPP"><IMG
SRC="images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
></DT
><DD
>After importing the necessary
              modules, we create a Qt application object. This object
              handles the dispatching of events from the mouse and
              keyboard to the various widgets of the application.
              Never try to create more than one
              <TT
CLASS="CLASSNAME"
>QApplication</TT
> object, not even if
              you embed Python and PyQt in a C++ Qt application. In
              that case, the C++ application should create the
              <TT
CLASS="CLASSNAME"
>QApplication object</TT
> and pass a
              reference to the embedded Python interpreter.</DD
><DT
><A href="x1067.htm#HELLO1BUTTON"><IMG
SRC="images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
></DT
><DD
>To keep things simple, we do not create a separate
              window object, but rather simply a pushbutton, of the type
              <TT
CLASS="CLASSNAME"
>QPushButton</TT
>. The first argument
              to the creation of the
              <TT
CLASS="CLASSNAME"
>QPushButton</TT
> is the text that is
              shown on the button. Since this is the only widget of
              the application, it doesn't have a parent.  This is what
              the <TT
CLASS="VARNAME"
>None</TT
> argument means &#8212;
              there is no parent, and the
              <TT
CLASS="CLASSNAME"
>QPushButton</TT
> is the root of the
              application widget tree.</DD
><DT
><A href="x1067.htm#HELLO1SETMAINWIDGET"><IMG
SRC="images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
></DT
><DD
>However, we still need to apprise
              the <TT
CLASS="CLASSNAME"
>QApplication</TT
> object of that
              fact &#8212; this is done by telling the
              <TT
CLASS="CLASSNAME"
>QApplication</TT
> that our button is
              the main widget:</DD
><PRE
CLASS="PROGRAMLISTING"
>app.setMainWidget(button)
            </PRE
><DT
><A href="x1067.htm#HELLO1SHOW"><IMG
SRC="images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></DT
><DD
>Then we <TT
CLASS="FUNCTION"
>show()</TT
>
              the button to the world.</DD
><DT
><A href="x1067.htm#HELLO1EXECLOOP"><IMG
SRC="images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
></DT
><DD
>Until the application objects
              starts the event loop, nothing will appear on screen.
              The call <TT
CLASS="FUNCTION"
>app.exec_loop()</TT
> does
              return a value, but we can safely disregard it.</DD
></DL
></DIV
></DIV
><DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>Note that this is one of the few
        instances where a method name differs between Python and C++:
        the C++ method is called <TT
CLASS="FUNCTION"
>exec()</TT
>, which is
        a reserved word in Python. Except for a few cases like this,
        reading the C++ documentation for Python use demands little
        more than a simple mental substitution.</P
><P
>Experienced Pythoneers will also note
        that the parameters in PyQt function calls are positional
        &#8212; not by keyword. In the old Tkinter GUI toolkit most
        function calls take the form:</P
><PRE
CLASS="PROGRAMLISTING"
>b = Button(root, text=label, command=func)
        </PRE
><P
>where PyQt wants:</P
><PRE
CLASS="PROGRAMLISTING"
>b = QPushButton(root, label, func)
        </PRE
><P
>Just something to be aware of: keyword
        parameters can be added in any old order, but positional
        parameters have to be in the right position.</P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="c1036.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="x1149.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Qt Concepts</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="c1036.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>A better Hello World</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
