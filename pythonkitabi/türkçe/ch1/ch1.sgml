    <chapter id="ch1">
    <title>Qt Kavramları</title>

    <para id="para-ch1-1">Bu bölüm Python ve Qt'un PyQt önyüzü kullanılarak
    birbirine nasıl bağlanacağını anlatmaktadır. Sinyaller ve slotlar,
    inheritance FIXME: inheritance ???, arayüz dizaynı gibi PyQt ve Qt'a has 
    kavramlar sürekli daha karmaşıklaşan <emphasis>merhaba dünya</emphasis>
    gibi basit klişe programlarla anlatılacaktır.
    </para>

    <sect1>
    <title>
    Python, Qt ve PyQt
    </title>

    <para id="para-ch1-2">Visual Basic gibi bütünleşik bir Grafiksel Kullanıcı 
    Arayüzü (GUI) motoru içeren betik dillerinin aksine Python'un bir garfiksel
    arayüzü yoktur. Fakat Python &mdash; için wxPython, Tkinter, PyGTK, PyFLTK,
    FoxPy, and PyQt gibi birçok GUI kütüphanesi vardır. PyQt, Norveç'teTrolltech
    için Eirik Eng ve Arnt Gulbrantsen tarafından C++ dili ile yazılan Windows 
    ve Unix ortamında kullanılabilen Qt tabanlıdır.
    Python &mdash; tarafından kullanılabilmesi için C++ ya da C kütüphanelerini
    bağlamak kolaydı ve Phil Thompson Python için bir GUI kütüphanesi arıyordu.
    Ve Qt kütüphanesini kullanarak PyQt'u üretmeye karar verdi. PyQt, BlackAdder
    hızlı geliştirme ortamının (RAD) da temelini oluşturur.</para>

    <para id="para-ch1-3">
    Qt çok geniş ölçelki iyi dizayn edilmiş görsel ögeler, parçacıklar ve birçok
    faydalı sınıf sunan çok gelişmiş bir kütüphanedir.
    Bunlara ek olarak, Qt kavraması kolay ve sezilerek kullanılabilecek çok temiz
    bir nesne tabanlı yapıyla dizayn edilmiştir. PyQt ile yazılan programlar
    değişiklik yapılmadan, yendien derlenmeden Windows ve Unix/X11
    sistemlerde &mdash; çalışmaktadır ve yakında Apple OS X sistemlerde de çalışabilecektir.
    </para>

    <para id="para-ch1-4">PyQt görsel parçacıkları (widget) <emphasis>stiller(styles)</emphasis>
    kullanılarak çizilebilir (isteğe bağlı olarak diğer stiller de kullanılabilir)
    ki bu yazılan programın çalıştığı sistemin kullandığı
    doğal parçacıklar gibi görünebilmesini sağlar.
    </para>

    <para id="para-ch1-5">Qt kütüphanesinde&mdash; iki çeşit nesne vardır;
    görsel nesneler ve görsel olmayan nesneler. Tüm görsel nesnelerin anası
    QWidget'tir. Qt'da kullanılan widget (bundan böyle parçacık olarak kullanılacaktır)
    sözcüğü Windows dünyasında <emphasis>control</emphasis> olarak adlandırılır.
    Etiketler (labels) ve düğmeler(buttons) gibi basit parçacıkların yanında canvas gibi
    daha kompleks parçacıklar da vardır. Tabii ki diyalog pencereleri de
    <classname>QWidget</classname> parçacığından oluşturulmaktadır.
    </para>

    <para id="para-ch1-6"><classname>QWidget</classname> ve diğer birçok 
    Qt sınıfı -hepsi değil- <classname>QObject</classname> temel sınıfından
    &mdash; elde edilmektedir. Örneğin <classname>QLayout</classname> sınıfı
    <emphasis>da</emphasis> <classname>QObject</classname> sınıfından elde
    edilmektedir.Fakat <classname>QPixmap</classname> sınıfı <classname>QObject</classname>
    sınıfından oluştrulmaz. Bir sınıfın <classname>QObject</classname> sınıfından
    elde edilip edilmeyeceğini sinyal (signal) ve slotlara (slot) gerek duyup duymaması
    ve oluşturulan nesnenin sahiplik hiyerarşisi içerisinde olup olmaması belirler.
    </para>

    <para id="para-ch1-7">Python gibi betik dilleri kötü performans
    gösterdikleri gibi bir izlenime sahiptir. Fakat PyQt uygulamaları
    gerçekten çok iyi performans göstermektedir. Python ile GUI nesneleri
    arasında çok ince/küçük bir bağlayıcı vardır. GUI nesneleri piksel seçme
    işinin ağır kısmını yaparlar ve zaten çok iyi optimize edilmiş C++ 
    ile yazılmışlardır.
    Eğer kendi DTP FIXME: DTP?? yerleşim motorunuzu Qt çizim tabanından FIXME:tabanından?
    yazmak gibi birşey denerseniz Python gibi byte-code yorumlayan dillerde yavaşlık
    engeleyici görünebilir. Fakat aslında bütün olarak bakıldığında yazdığınız uygulama
    sadece C++ ile yazılmış gibi hızlı yanıt verir. Üstelik ilk yazdığınız C++ prototip
    üzerinde hala kodlamaya devam ederken bile çalışan bir uygulamanız olur.
     </para>


<!-- BR: I made a change -->
    <indexterm>
    <primary>PyQt, Qt ve Python Sürümleri</primary>
    </indexterm>
    <note><title>Sürümler üzerine bir not</title>

    <para id="para-ch1-8">PyQt enaz üç bileşenden oluşur;Python, Qt ve PyQt'un kendisi.
    Ek olarak, PyKDE (Unix KDE Masaüstü Ortamı için bağlayıcılar) vardır.
    Bu dört bileşenin sürüm numaraları genellikle birbiriyle ilişkisizdir.
    Qt'un belirli bir zamanda üç sürümü vardır aynen PyQt gibi. Bununla birlikte,
    PyQt 3.x, Qt 1.x, Qt 2.x <emphasis>ve</emphasis>Qt 3.x ile derlenebilir.
    </para>

    <para id="para-ch1-9">PyQt sürümleri arasındaki farklılık Qt'un
    desteklediği sürümler oranında, organizasyona ve yürütmeye bağlı
    detaylara bağlı olarak oluşmaktadır.
    </para>

    <para id="para-ch1-10">Aslında PyQt ile Python arasındaki ilişki göründüğünden
    daha belirsizdir şöyle ki: PyQt en iyi Python'un son sürümü ile çalışmaktadır ama
    önceki sürümlerle de çalıştığı bilinmektedir.
    </para>

    <para id="para-ch1-11">Neyse sadece PyQt 3.x sürümünün Qt 2.x or Qt 3.x
    kullanabildiğini aklımzda tutalım yeter. Bu kitap çoğunlukla Qt 2.x için  PyQt 2.x
    kullanılarak yazıldı fakat elimden geldiğince PyQt 3.x ve Qt 3.x ile ilgili
    bilgiler de vermeye çalıştım.
    </para>

    </note>
<!-- END CHANGE -->

    </sect1>

    <sect1 id="ch1HelloWorld">
    <title>
    Göründüğü kadar kolay
    </title>

    <indexterm>
    <primary>Merhaba Dünya</primary>
    </indexterm>
    <para id="para-ch1-12">Büyük işlere soyunmadan önce mümkün olan en az bileşenden
    oluşan, daha sonra yavaş yavaş özelliklerini geliştireceğimiz ve ekranda birşeyler
    gösteren bir PyQt uygulamasının yapısını inceleyelim.
    </para>

    <para id="para-ch1-13">Basit bir PyQt uygulaması şu elemanları içerir:</para>


    <itemizedlist>
    <listitem>
    <para id="para-ch1-14">
    bir uygulama(program) nesnesi
    </para>
    </listitem>
    <listitem>
    <para id="para-ch1-15">
    bir ana pencere (main window) ki onun bir merkezi parçacığı vardır.<emphasis>ya da</emphasis>
    </para>
    </listitem>
    <listitem>
    <para id="para-ch1-16">
    bir ana parçacık (main widget)
    </para>
    </listitem>
    </itemizedlist>

    <para id="para-ch1-17">Bu geleneksel &rdquo;Merhaba Dünya&rdquo; olarak
    adlandırılan, bir düğme içeren uygulamadır ve mümkün olan en az kod ile yazılmıştır:</para>

    <mediaobject>
    <imageobject>
    <imagedata scale="80" align="center" fileref="ch1/hello1.eps">
    </imageobject>
    <caption>
    <para id="para-ch1-18">Merhaba Dünya</para>
    </caption>
    </mediaobject>

    <example>
    <title>hello1.py &mdash; merhaba dünya</title>
    <programlistingco>
    <areaspec>
    <area coords="4" id="hello1impsys">
    <area coords="5" id="hello1impqt">
    <area coords="7" id="hello1createapp">
    <area coords="8" id="hello1button">
    <area coords="9" id="hello1setmainwidget">
    <area coords="10" id="hello1show">
    <area coords="11" id="hello1execloop">
    </areaspec>
    <programlisting>
    #
    # hello1.py
    #
    import sys
    from qt import *

    app=QApplication(sys.argv)
    button=QPushButton("Hello World", None)
    app.setMainWidget(button)
    button.show()
    app.exec_loop()
    </programlisting>
    <calloutlist>
    <callout arearefs="hello1impsys">
    <para id="para-ch1-19">Öncelikle Python
    <emphasis>sys</emphasis> paketini import ile çağırmalıyız.
    Çünkü <classname>QApplication</classname> nesnesi komut satırından betiği
    çalıştırmak için verilecek argümanlara bakmak ister.
    Örnek olrak, betiğimizi
    <userinput>python hello1.py -style=platinum</userinput>
    komutu ile başlatırsak &ldquo;-style=platinum&rdquo;
    argümanını QApplication nesnesine göndermiş ve uygulamamızın
    Mac-OS 8.5 gibi stilinde görünmesini sağlamış oluruz.
    </para>

    <para id="para-ch1-20">Qt'un güzelliklerinden biri de
    size tüm desteklediği parçacık sitillerini (widget styles)
    tüm platformlarda kullanma şansı vermesidir. Aqua stili yalnızca OS X
    platformunda kullanılabilir. Çünkü Apple bu sitilin diğer platformlara
    yayılmasını istememektedir.</para>
    </callout>
    <callout arearefs="hello1impqt">
    <para id="para-ch1-21">Ardından Qt kütüphanesini çağırmak(import) zorundayız.
    Aslında bu kütüphane içerisinden sadece bize gereken elemanları çağırmamız da mümkündür.
    Ama bu işin en kolay ve en verimli şekli tüm kütüphaneyi çağırmaktır.
    Fakat tabii ki <programlisting> from qt import QApplication, QPushButton </programlisting>
    şeklinde de kütüphane içerisinden istediğimiz elemanları çağırabiliriz.
    </para>
<!-- BR: I made a change -->
    <indexterm>
    <primary>qt module layout</primary>
    </indexterm>
    <para id="para-ch1-22">PyQt'un 3x sürümünden sonra,
    kütüphane bazı bağımsız modüllere ayrıldı.
    <varname>Qt</varname> modülü hala temel ögeler için yeterlidir.
    Ancak, canvas(yerleşim,plan) gibi daha gelişmiş işlevsellik içeren modüller
    bağımsız modüllere ayrıldı.Örn: <classname>QCanvas</classname> modülü
    <varname>qtcanvas</varname> olarak çağrılmalıdır.
    </para>
<!-- END OF CHANGE -->
    </callout>
    <callout arearefs="hello1createapp">
    <para id="para-ch1-23">Gerekli modülleri çağırdıktan sonra
    bir Qt application nesnesi oluştururuz. Bu nesne
    uygulamanın değişik parçacıklarından gelen fare ve klavye
    olaylarını yakalar.
    Asla birden fazla <classname>QApplication</classname> nesnesi oluşturmayın.
    Eğer Python ve PyQt'u bir C++ Qt uygulaması içerisine gömecekseniz
    <classname>QApplication object</classname> nesnesini C++ application
    oluşturmalı ve gömülü Python yorumlayıcısına bir referans geçmelidir.
    </para>
    </callout>
    <callout arearefs="hello1button">
    <para id="para-ch1-24">Yazdığımız kodu basit tutmak için,
    bağımsız pencere nesneleri oluşturmadık. Sadece <classname>QPushButton</classname>
    sınıfını kullanarak basit bir düğme (pushbutton) oluşturduk.
    <classname>QPushButton</classname> nesnesini oluştururken kullandığımız
    ilk argüman düğmenin üzerinde gösterilen metin/Merhaba Dünya (text) dır.
    Bu nesne uygulamanın tek parçacığı olduğundan bir ebeveyni yoktur. Bu nedenle
    <varname>None</varname> argümanı alarak &mdash;
    bir ebeveyninin olmadığı kod içerisinde bildirilmiştir. Başka bir deyişle,
    <classname>QPushButton</classname> parçacığı uygulamanın parçacık ağacında kök parçacıktır.
    </para>
    </callout>
    <callout arearefs="hello1setmainwidget">
    <para id="para-ch1-25">Bununla birlikte, hala
    <classname>QApplication</classname> nesnesine bu gerçeği
    bildirmek zorundayız &mdash; bunu da <classname>QApplication</classname>
    nesnesine düğmenin ana parçacık olduğunu anlatarak sağlarız:</para>

    <programlisting>
    app.setMainWidget(button)
    </programlisting>

    </callout>
    <callout arearefs="hello1show">
    <para id="para-ch1-26">Ve <function>show()</function>
    fonksiyonu ile düğmeyi tim dünyaya gösterme zamanı geldi.</para>
    </callout>
    <indexterm>
    <primary>event loop FIXME:??</primary><secondary>exec_loop</secondary>
    </indexterm>
    <callout arearefs="hello1execloop">
    <para id="para-ch1-27">Uygulama nesneleri olay döngüsünü başlatana kadar
    tabii ki ekranda birşey görünmeyecektir.
    Aslında <function>app.exec_loop()</function> fonksiyonu bir değerle döner
    ama bunu güvenli bir şekilde gözardı edebiliriz.</para>
    </callout>
    </calloutlist>
    </programlistingco>
    </example>
    <note>
    <para id="para-ch1-28">Method adları konusunda Python ve C++ arasındaki
    birkaç farktan biri olan bu farkı unutmayalım:
    C++ dilinde bu method <function>exec()</function> olarak kullanılır.
    exec() Python dilinde depolanmış (gömülü) sözcüklerden biridir.
    Bu ve buna benzer birkaç sınıf dışında Python içinde kullanmak için
    C++ dökümanlarını okumak/kullanmak sadece ufak bir zihinsel çaba (yerine kullanma)
    ile kolayca yapılabilir.
    </para>

    <indexterm>
    <primary>calling conventions</primary>
    </indexterm>
    <para id="para-ch1-29">İleri düzey Python geliştiricileri şunu da unutmamalıdır ki
    PyQt fonksiyon çağrıları aynı zamanda konumsaldır &mdash; not by keyword. FIXME : not by keyword -anlamadım??
    Eski Tkinter GUI kütüphanesinde birçok fonsiyon çağrıları şu şekilde yapılırdı:</para>

    <programlisting>
    b = Button(root, text=label, command=func)
    </programlisting>

    <para id="para-ch1-30">PyQt ise böyle ister:</para>

    <programlisting>
    b = QPushButton(root, label, func)
    </programlisting>

    <para id="para-ch1-31">Ek bilgi olsun diye şöyle diyebiliriz: 
    anahtar sözcük (keyword) parametreler eski düzende eklenebilir fakat
    konumsal parametreleri doğru yere koymak zorunludur.
    </para>

    </note>

    </sect1>
    <sect1 id="ch1-sect1-better-hello">
    <title>
    Daha Gelişmiş bir Merhaba Dünya Uygulaması
    </title>

    <para id="para-ch1-32">Tabii ki, ciddi anlamda bir önceki gibi
    bir betiği bir daha yazmayacaksınız. Sadece çalıştığını gördük, 
    O örnek bir PyQt uygulamasını ayarlamanın doğru yolunu size göstermez.
    Saha gelişmiş bir yapıyı şimdiki örneğimizde göreceksiniz:</para>

    <example><title>hello2.py &mdash; Daha Gelişmiş bir Merhaba Dünya Uygulaması</title>
    <programlisting>
import sys
from qt import *

class HelloButton(QPushButton):

    def __init__(self, *args):
        apply(QPushButton.__init__, (self,) + args)
        self.setText("Hello World")

class HelloWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.button=HelloButton(self)
        self.setCentralWidget(self.button)

def main(args):
    app=QApplication(args)
    win=HelloWindow()
    win.show()
    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

if __name__=="__main__":
    main(sys.argv)
    </programlisting>
    </example>

    <para id="para-ch1-33">Bu örnek tabii ki daha iyi. Hala sıkıcı ve önemsiz olmasına rağmen
    bu küçük program Python ve Qt ile programlama yapmanın birkaç önemli boyutunu size gösterir:
    Qt sınıflarını Python içerisinde altsınıflama (subclassing), pencere ve parçacıkların kullanımı,
    sinyaller(signals) ve slotların (slots) kullanımı gibi.</para>

    <para id="para-ch1-34">Birçok PyQt uygulamasında QMainWindow kullanarak
    bir ana pencere sınıfı oluşturacaksınız ve tabii ki Qt parçacıkları (widgets) &mdash; ile
    en az bir tane görünen ana parçacık oluşturacaksınız.
    Bu ana parçacık bir liste görünümü (listview) bir düzenleyici penceresi (editor window)
    ya da tuval (canvas) da olabilir. Tabii ki örneğimizde olduğu gibi basit bir düğme (button)
    de olabilir.
    Bununla birlikte PyQt neredeyse tüm Qt sınıfları için altsınıflar oluşturmanıza izin verir.
    FIXME: nedir bu?  you can't base a Python class on more than
    one Qt class at a time.</para>

    <para id="para-ch1-35">Çünkü çoklu miras Qt sınıfları tarafından desteklenmez.
     Bu nadiren problem olur&mdash; ki bir parçacığın aynı anda hem checkbox
     hem de radiobutton olduğunda nasıl görüneceğini düşünün.
     Bir kişisel parçacık içerisinde iki parçacığın kullanımı da başka bir durumdur
     ki çağrılmış yetkilendirme tam olarak desteklenir. </para>

    <para id="para-ch1-36">Bu betikte <classname>QMainWindow</classname> sınıfını
    altsınıflayarak merkez parçacık olarak bir pushbutton içeren
    bir kişiselleştirilmiş pencere oluşturduk. Neredeyse herzaman 
    bir pencere normal olarak kenarlıklar, menüler, araç çubukları içerir.
    QMainWindow  da zaten bunun için dizayn edilmiştir.
    Bu örnekte herhangi bir menü ögesi tanımlamadığımızdan pencere hala
    biraz eksik/çıplak görünüyor.</para>

    <para id="para-ch1-37">Pencerenin merkez bölümü posta kutusu gibi görünen yerdir.
    Uygulamamıza özel işlevsellik de burada ortaya çıkıyor.
    Burada tabii ki düğmemiz var.
    <classname>QMainWindow</classname> sınıfı merkezi ögeyi boyutlandırma işini 
    otomatik olarak yapar. Pencere kenarlıklarını sürükleyip büyütürken dikkat 
    edin merkezi parcacık da büyür. Ayrıca önceki Merhaba Dünya ugulamamızla
    şimdiki uygulamamızın şekli arasındaki farka dikkat edin:
    Bu farklılığa <classname>QMainWindow</classname> sınıfının
    otomatik yerleştirme işini kendiliğinden üstlenmesi neden olmaktadır.</para>

    <mediaobject>
    <imageobject>
    <imagedata scale="60" align="center" fileref="ch1/hello2.eps">
    </imageobject>
    <caption><para id="para-ch1-38">Daha Gelişmiş bir Merhaba Dünya Uygulaması</para></caption>
    </mediaobject>

    <indexterm>
    <primary>setCentralWidget()</primary>
    </indexterm>
    <para id="para-ch1-39">Pencerenin merkezi kısmını ayarlamak için şu satırı (method) kullandık:
    setCentralWidget() </para>

    <programlisting>
    self.setCentralWidget(self.button)
    </programlisting>

    <indexterm>
    <primary>sinyaller (signals) ve slotlar (slots)</primary>
    </indexterm>
    <para id="para-ch1-40">Bir uygulama hiç pencere kullanmayabileceği gibi bir ya da
    birden fazla pencere de kullanabilir ve tabii ki bir uygulama açılan
    son pencere kapatılmadan kapanmamalıdır. <classname>QApplication</classname>
    nesnesi açık olan pencere sayısını hesaplar ve son pencere kapandığında dünyayı uyarmayı bekler.
    Bu işlev de tabii ki sinyal ve slot sistemi tarafından yerine getirilir.
    Bu sistem ilerleyen bölümlerde daha derinlemesine anlatılacaktır. Ancak burada 
    bazı noktalar hakkında çeşitli bilgiler vermek gerekiyor.</para>

    <para id="para-ch1-41">Basit bir şekilde anlatacak olursak;
    nesneler birbiri ile ilgilidir ve bir olay meydana geldiğinde ilgili
    tüm nesneler uyarılır. Örneğimizde, QApplication nesnesi kapanmak için
    son pencerenin ne zaman kapandığını bilmek istiyor.</para>

    <programlisting>
    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    </programlisting>

    <indexterm>
    <primary>quit()</primary>
    </indexterm>
    <para id="para-ch1-42">Bu satırı analiz edelim:
    <varname>app</varname> nesnesi <function>lastWindowClosed()</function>
    (application nesnesi tarafından kendisine gönderilir) sinyali ile kendi
    <function>quit()</function> fonksiyonu arasında bir bağlantı kuruyor.
    Hem GUI çalışmalarında hem de daha basit durumlarda Sinyal ve slotları 
    Python ile kullanmak oldukça kolaydır.</para>

    <para id="para-ch1-43">Sinyaller ve slotların kullanıldığı başka bir HelloWindow sınıfı örneği:</para>

    <example><title>hello3.py --örneği için yeni bir parça</title>
    <programlisting>

class HelloWindow(QMainWindow):

    def __init__(self, *args):
        apply(QMainWindow.__init__, (self,) + args)
        self.button=HelloButton(self)
        self.setCentralWidget(self.button)
        self.connect(self.button, SIGNAL("clicked()"),
                     self, SLOT("close()"))
    </programlisting>
    </example>

    <para id="para-ch1-44">Burada <function>clicked()</function> sinyalinin olduğu yere
    bir satır ekledik ki bu sinyal <classname>QPushButton</classname>
    tarafından -tıklandığı zaman- verilecek. <function>clicked()</function> sinyali
    aynı zamanda <classname>HelloWindow</classname> sınıfına ait olan
    <function>close()</function> slotuna bağlıdır.

    We have added a line where the FIXME :?? ne diyo burda
    <function>clicked()</function> signal, which is emitted by the
    <classname>QPushButton</classname> when it is clicked, is
    connected to the <function>close()</function> slot of the
    <classname>HelloWindow</classname> class.
    <classname>HelloWindow</classname> 
    <classname>QMainWindow</classname> nesnesini miras olarak aldığında
    aynı zamanda tüm slot fonksiyonlarını da miras alır.</para>

    <para id="para-ch1-45">Şimdi eğer düğmeye tıklarsanız pencere kapanır
    ve biz de ilk etkileşimli PyQt uygulamamızı bitirmiş oluruz!
    </para>

    <para id="para-ch1-46">Ana fonksiyonu yeniden yazarak birden fazla pencere açabilen
      ilginç bir alıştırma daha yapabiliriz:
    </para>

    <example><title>hello5.py için yeni bir parça</title>
    <programlisting>

def main(args):
    app=QApplication(args)
    winlist=[]
    for i in range(10):
        win=HelloWindow()
        win.show()
        winlist.append(win)

    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

    </programlisting>
    </example>

    <para id="para-ch1-47">Eğer hello5.py betiğini çalıştırısanız,
    on tane Merhaba Dünya penceresinin masaüstünüzü kapladığını göreceksiniz.
    Herbir pencereyi düğmeye basarak ya da pencere kontrollerini kullanarak
    kapatabilirsiniz.
    Dikkat ederseniz uygulama ancak son pencere kapatıldığında sonlanacaktır.
    </para>

    <para id="para-ch1-48">
    <literal>winlist.append(win)</literal> satırını yorum satırı haline getirip
    betiği tekrar çalıştırın:</para>

    <example><title>hello4.py üzerinde küçük değişiklik</title>
    <programlisting>

def main(args):
    app=QApplication(args)
    winlist=[]
    for i in range(10):
        win=HelloWindow()
        win.show()
        #winlist.append(win)

    app.connect(app, SIGNAL("lastWindowClosed()"),
                app, SLOT("quit()"))
    app.exec_loop()

    </programlisting>
    </example>

    <para id="para-ch1-49">ve neler olduğuna bakın...</para>

    <indexterm>
    <primary>garbage collection FIXME :?</primary><secondary>reference counting</secondary>
    </indexterm>
    <para id="para-ch1-50">Bu özellik Python'un ilginç yanlarından biridir:
    C++ dilinin aksine Python pythonda bir FIXME:? garbage collector vardır.
    Bu sanal garbage-adam referans verilmemiş nesneleri mümkün olan
    en kısa sürede temizleyecektir.
    Bu şu anlama gelir; Python değişken adı ile ilişkilendirilmeyen
    hiçbir nesne görüntülenmeyecektir.(Eğer nesne <classname>QObject</classname>
    sınıfının bir FIXME :? oğlu (child) ise durum değişir,
    ayrıntılar için <xref linkend="ch3"> bölümüne bakın.)
    Eğer bu temizlik işini C++ dilinde denerseniz,referans tutma konusunda 
    bir değişiklik olmaz, C++ kullanılmayan nesneleri sizin için silmez.
    Bu durum da hoşunuza gitmeyecek gereksiz bellek kullanımına neden olur.
    </para>

    </sect1>
    <sect1>

    <title>Form Hazırlama</title>

    <indexterm>
    <primary>form tasarlama</primary>
    </indexterm>
    <para id="para-ch1-51">BlackAdder ve PyQt'un önemli özellikerinden biri
    görsel arayüz (GUI) tasarım aracına sahip olmalarıdır.
    Her çeşit diyalog penceresi ve kişiselleştirilmiş parçacık
    oluşturmak için bu tasarım aracını kullanabilirsiniz.
    </para>

    <para id="para-ch1-52">Kullanıcı arayüzü için görsel olarak yapılan
    tanımlamalar XML formatındaki dosyalara kaydedilir ve siz de bu 
    dosyaları kolayca Python kodlarına çevirebilirsiniz.
    Bu sistemin güzelliği tasarımlarınızı kolayca geçerli C++ kodlarına
    çevirebilmeniz ve prototip uygulamanızı Python ile geliştirmenizin 
    kolaylaşmasıdır. Eğer sonradan isterseniz tüm arayüzü hızlı, derlenmiş
    C++ diline çevirebilirsiniz.(C++ kodlarınızın Windows, Unix/X11, OS X ve
    gömülü sistemlerde de derlenebildiğini ekleyelim.)
    </para>

    <para id="para-ch1-53">Qt3 içerisinde gelen Qt Designer de ana pencereleri 
    araç çubukları ve menüleri ile birlikte oluşturabilir.
    Artık <application>pyuic</application> uygulaması bu ögeleri de içerecek
    şekilde güncellendiğinden bu uygulamayı da Python projelerinizde
    kullanabilirsiniz.
    </para>

    <para id="para-ch1-54">Designer yazılımını kullanarak bazı sistemlere
    bağlanabilen ve kanca atabilen küçük bir programı PyQt ile tasrlayalım.
    </para>

    <mediaobject>
    <imageobject>
    <imagedata scale="40" align="center" fileref="ch1/designer_frmconnect.eps">
    </imageobject>
    <caption><para id="para-ch1-55">gui designer ile oluşturulan bir form</para></caption>
    </mediaobject>

    <indexterm>
    <primary>yerleşim yönetimi</primary>
    </indexterm>
    <para id="para-ch1-56">Qt Tasarımcı (designer) ile çalışmak kolaydır,
    sadece <emphasis>asla</emphasis> ögeleri mükemmel bir şekilde
    piksellere yerleştirmek zorunda olmadığınızı unutmayın.
    Sadece tüm ögeleri kabaca doğru yerlere koyun, Qt yerleşim yöneticilerini
    (Qt layout managers) ekleyin ve yaptıkları sihirli işi görün.
    </para>

    <para id="para-ch1-57">Bir yerleşim yöneticisini yönetmek istediğiniz
    parçacıkları ve doğru yerleşim yöneticisini araç çubuğundan seçerek
    ekleyebilirsiniz.
    </para>

    <para id="para-ch1-58">Yukarıdaki tasarımda üç tane yerleşim yöneticisi
    vardır:sağdaki düğmeler istif edilmiştir,bevel içindeki parçacıklar
    ızgaralanmıştır ve form içerisndeki herşey başka br ızgara  içerisindedir.
    Bu diyalog penceresini büyültüp küçültseniz de görünümünün bozulmadığını
    göreceksiniz. Daha da iyisi, görme bozukluğu yaşayan bir kullanıcı sistemi için
    çok büyük yazı tipleri seçmiş olsa da (örneğin Arial 24 pt kalın) görünüm
    yine de bozulmayacaktır.
    </para>

    <indexterm>
    <primary>ui dosyaları</primary>
    </indexterm>
    <indexterm>
    <primary>form tasarımları derlemek</primary>
    </indexterm>
    <para id="para-ch1-59">İsterseniz .ui dosyasını BlackAdder kullanarak
    ya da komut satırından derleyebilirsniz. Sonuç şuna benzer bir şekilde
    görünecektir:</para>

    <example><title>frmconnect.py</title>
    <programlisting>

# Form implementation generated from reading ui file 'frmconnect.ui'
#
# Created: Wed Feb 28 21:34:40 2001
#      by: The Python User Interface Compiler (pyuic)
#
# WARNING! All changes made in this file will be lost!

from qt import *


class frmConnect(QDialog):
    def __init__(self,parent = None,name = None,modal = 0,fl = 0):
        QDialog.__init__(self,parent,name,modal,fl)

        if name == None:
            self.setName('frmConnect')

        self.resize(547,140)
        self.setCaption(self.tr('Connecting'))
        self.setSizeGripEnabled(1)
        frmConnectLayout = QGridLayout(self)
        frmConnectLayout.setSpacing(6)
        frmConnectLayout.setMargin(11)

        Layout5 = QVBoxLayout()
        Layout5.setSpacing(6)
        Layout5.setMargin(0)

        self.buttonOk = QPushButton(self,'buttonOk')
        self.buttonOk.setText(self.tr('&amp;OK'))
        self.buttonOk.setAutoDefault(1)
        self.buttonOk.setDefault(1)
        Layout5.addWidget(self.buttonOk)

        self.buttonCancel = QPushButton(self,'buttonCancel')
        self.buttonCancel.setText(self.tr('&amp;Cancel'))
        self.buttonCancel.setAutoDefault(1)
        Layout5.addWidget(self.buttonCancel)

        self.buttonHelp = QPushButton(self,'buttonHelp')
        self.buttonHelp.setText(self.tr('&amp;Help'))
        self.buttonHelp.setAutoDefault(1)
        Layout5.addWidget(self.buttonHelp)
        spacer = QSpacerItem(20,20,QSizePolicy.Minimum,QSizePolicy.Expanding)
        Layout5.addItem(spacer)

        frmConnectLayout.addLayout(Layout5,0,1)

        self.grpConnection = QGroupBox(self,'grpConnection')
        self.grpConnection.setSizePolicy(QSizePolicy(5,7,self.grpConnection. \
        sizePolicy().hasHeightForWidth()))

        self.grpConnection.setTitle(self.tr(''))
        self.grpConnection.setColumnLayout(0,Qt.Vertical)
        self.grpConnection.layout().setSpacing(0)
        self.grpConnection.layout().setMargin(0)
        grpConnectionLayout = QGridLayout(self.grpConnection.layout())
        grpConnectionLayout.setAlignment(Qt.AlignTop)
        grpConnectionLayout.setSpacing(6)
        grpConnectionLayout.setMargin(11)

        self.lblName = QLabel(self.grpConnection,'lblName')
        self.lblName.setText(self.tr('&amp;Name'))

        grpConnectionLayout.addWidget(self.lblName,0,0)

        self.lblHost = QLabel(self.grpConnection,'lblHost')
        self.lblHost.setText(self.tr('&amp;Host'))

        grpConnectionLayout.addWidget(self.lblHost,2,0)

        self.lblPasswd = QLabel(self.grpConnection,'lblPasswd')
        self.lblPasswd.setText(self.tr('&amp;Password'))

        grpConnectionLayout.addWidget(self.lblPasswd,1,0)

        self.txtPasswd = QLineEdit(self.grpConnection,'txtPasswd')
        self.txtPasswd.setMaxLength(8)
        self.txtPasswd.setEchoMode(QLineEdit.Password)

        grpConnectionLayout.addWidget(self.txtPasswd,1,1)

        self.cmbHostnames = QComboBox(0,self.grpConnection,'cmbHostnames')

        grpConnectionLayout.addWidget(self.cmbHostnames,2,1)

        self.txtName = QLineEdit(self.grpConnection,'txtName')
        self.txtName.setMaxLength(8)

        grpConnectionLayout.addWidget(self.txtName,0,1)

        frmConnectLayout.addWidget(self.grpConnection,0,0)

        self.connect(self.buttonOk,SIGNAL('clicked()'),self,SLOT('accept()'))
        self.connect(self.buttonCancel,SIGNAL('clicked()'), \
        self,SLOT('reject()'))

        self.setTabOrder(self.txtName,self.txtPasswd)
        self.setTabOrder(self.txtPasswd,self.cmbHostnames)
        self.setTabOrder(self.cmbHostnames,self.buttonOk)
        self.setTabOrder(self.buttonOk,self.buttonCancel)
        self.setTabOrder(self.buttonCancel,self.buttonHelp)

        self.lblName.setBuddy(self.txtName)
        self.lblPasswd.setBuddy(self.txtName)
    </programlisting>
    </example>

    <indexterm>
    <primary>form tasarımlarını FIXME:? altsınıflamak (subclassing)</primary>
    </indexterm>
    <indexterm>
    <primary>görsel tasarım</primary>
    </indexterm>
    <para id="para-ch1-60">Bu yaptıklarımız size çok sempatik görünüyor
    fakat malesef bu kodu asla değiştiremeyeceksiniz.
    Yaptığınız tü değişiklikleri kaybetme pahasına sonraki değişikliklerde
    tasarımınızı yeniden yaparak .ui dosyanızı tekrar Python koduna
    dönüştürebilirsiniz. FIXME: ne diyo burada??
    The best thing to do is to subclass this form with
    code that actually fills the dialog with data and perfoms an
    action upon closing it. Ben oluşturulan form ve altsınıflanmış form isimlerini
    isimleri ile benzer şekilde tutmaktan hoşlanırım ve önce bir form olarak
    sonra da dialog olarak atıfta bulunmayı tercih ederim.
    Oluşturulan formlar için ön ek olarak frmXXX, diyaloglar için dlgXX  kullanırım.
    </para>

    <para id="para-ch1-61">Örneğin:</para>

    <example<title>dlgconnect.py &mdash; oluşturulan formun alt sınıflanmış şekli</title>
    <programlisting>
import sys
from qt import *

from frmconnect import frmConnect

class dlgConnect(frmConnect):

    def __init__(self, parent=None):
        frmConnect.__init__(self, parent)
        self.txtName.setText("Baldrick")
        for host in ["elizabeth","george", "melchett"]:
            self.cmbHostnames.insertItem(host)

    def accept(self):
        print self.txtName.text()
        print self.txtPasswd.text()
        print self.cmbHostnames.currentText()
        frmConnect.accept(self)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    QObject.connect(app, SIGNAL('lastWindowClosed()'),
                    app, SLOT('quit()'))
    win = dlgConnect()
    app.setMainWidget(win)
    win.show()
    app.exec_loop()
    </programlisting>
    </example>

    <para id="para-ch1-62">Gördüğünüz gibi, oluşturulan formu 
    altsınıfladık. İnşa aracı sayesinde, bazı alanlar küçük veriler ile dolduruldu.
    Buarada Python string nesnelerini setText() methodu ile kolayca kullanabileceğimizi
    unutmayın. Qt özel bir string nesnesi kullanır: Qt içerisinde
    <classname>QString</classname> tüm metinsel veriler için kullanılır.
    Fakat PyQt tüm Python stringlerini ve Python unicode stringlerini
    <classname>QString</classname> nesnesine otomatik olarak çevirir.
    Ek olarak <xref linkend="ch4"> bölümünde değineceğimiz bazı
    zorluklar olsa da çeviri çoğunlukla şeffaftır.
    </para>

    <para id="para-ch1-63">OK düğmesine bastığınızda, Qt dialog sınıfının
    <function>accept()</function> methodunu çağırır, bu durumda,
    <classname>dlgConnect</classname>
    <classname>frmConnect</classname> i
    <classname>frmConnect</classname> de
    <classname>QDialog</classname> u miras alır.
    <function>accept()</function> methodu alanların içeriğini yazar.
    Sonra ebeveyn sınıfın methodu <function>accept()</function>
    &mdash; nihayet <classname>QDialog</classname>
    &mdash; çağrılır ve dialog kapanır.FIXME : Bu paragraftan emin değilim</para>

    </sect1>

    <sect1>
    <title>Sonuç</title>

    <para id="para-ch1-64">Bu bölümde birçok konuya yüzeysel olarak değinerek
    Python ve PyQt ile yazılım geliştirmenin ilk adımlarını gördük.
    Bu bölümün geri kalan kısmında yüzeysel olarak geçtiğimiz bu konuları
    derinlemesine inceleyeceğiz. Ardından III. kısımda gerçek bir uygulama 
    geliştirmeye başlayacağız. Eğer kendinizi kaybolmuş gibi hssediyorsanız Qt
    ya da BlackAdder ile birlikte gelen çevrimiçi dökümanlara herzaman 
    başvurabilirsiniz. <xref linkend="readingDocumentation"> Qt Dökümanlarını okumak,
    başlığı size C++ sınıf dökümanlarını size fayda sağlayacak ve zevk verecek şekilde
    nasıl okuyacağınızı anlatıyor.
    </para>

    </sect1>
    </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-general-insert-case:lower
sgml-default-dtd-file:"../chapter.ced"
End:
-->

