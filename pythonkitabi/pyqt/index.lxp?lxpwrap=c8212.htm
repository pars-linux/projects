

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=c8212.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Internationalizing an Application</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Creating real applications with PyQt"
HREF="p4627.htm"><LINK
REL="PREVIOUS"
TITLE="Conclusion"
HREF="x8207.htm"><LINK
REL="NEXT"
TITLE="Delivering your Application"
HREF="c8349.htm"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=x8207.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=c8349.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="CHAPTER"
><H1
>Chapter 25. Internationalizing an Application</A
></H1
><P
>For more than a century people have been
    uttering the platitude that the world is getting smaller all the
    time. That's nonsense: it's getting bigger. Although most computer
    users are still able to work with English-only applications, even
    speakers of <SPAN
><I
CLASS="EMPHASIS"
>really</I
></SPAN
> obscure languages, like
    Limbu, own computers and would like some applications in their own
    language.</P
><P
>An open-source effort like KDE offers
    more-or-less complete translations of the entire desktop,
    including all applications in dozens of languages. And, for a
    consideration, you can get a version of Windows in your own
    language, too, even if that language is Basque.</P
><P
>Of course, there are other aspects to the
    internationalization of an application, like date and number
    formats, currency, keyboard, preferred dialog layout and so on.
    Some of these aspects are handled by Qt - like reversing the
    dialog layout if the current script is right-to-left. Others, like
    the date and number formats are handled by Python's
    <TT
CLASS="FILENAME"
>locale</TT
> module - which is alas severely
    underdocumented.</P
><P
>Translating texts on screen can be handled
    either by PyQt - using the <TT
CLASS="CLASSNAME"
>QTranslator</TT
>
    class, or by Python itself - using the
    <TT
CLASS="FILENAME"
>gettext</TT
> module. PyQt's
    <TT
CLASS="CLASSNAME"
>QTranslator</TT
> is far more convenient in use,
    but <TT
CLASS="FILENAME"
>gettext</TT
> is based on the wide-spread GNU
    gettext library, which is also used by KDE for its
    translations.</P
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Translating screen texts</A
></H1
><P
>The first task is to surround all
      translatable text with the method <TT
CLASS="FUNCTION"
>self.tr()</TT
>
      - every <TT
CLASS="CLASSNAME"
>QObject</TT
> - derived class has that
      method. You don't have to do that manually with designs you have
      generated with the Designer module or
      <SPAN
CLASS="APPLICATION"
>Qt Designer</SPAN
>. However, for Kalam,
      it's a fair bit of work - I'll only show a fragment here:</P
><PRE
CLASS="PROGRAMLISTING"
># fragment from kalamapp.py
 ...
    def initActions(self):
        self.actions = {}
        self.actions["fileNew"] = \
              QAction(self.tr("New"),
                      QIconSet(QPixmap(filenew)),
                      self.tr("&#38;New"),
                      QAccel.stringToKey(self.tr("CTRL+N",
                                                 "File|New"))
                      self)
        self.connect(self.actions["fileNew"],
                     SIGNAL("activated()"),
                     self.slotFileNew)


        self.actions["fileOpen"] = \
              QAction(self.tr("Open"),
                      QIconSet(QPixmap(fileopen)),
                      self.tr("&#38;Open"),
                      QAccel.stringToKey(self.tr("CTRL+O",
                                                 "File|Open")),
                      self)
        self.connect(self.actions["fileOpen"],
                     SIGNAL("activated()"),
                     self.slotFileOpen)
 ...
    </PRE
><P
>You must not only mark all text that will
      appear on screen, but also all accelerator keys, otherwise
      translators won't be able to translate them. The extra argument
      to <TT
CLASS="FUNCTION"
>tr()</TT
> gives the translator some extra
      context.</P
><P
>The <TT
CLASS="FUNCTION"
>tr()</TT
> serves two
      purposes: at first, it used as a recognition point for a small
      utility that extracts the strings to create message catalogs -
      files full of translatable text that you can send your Limbu
      speaking friends to translate for you.</P
><P
>Secondly, when you run the application,
      <TT
CLASS="FUNCTION"
>tr()</TT
> looks in a message database to find
      the right string. This is a very fast operation, so you don't
      have to worry about performance loss.</P
><P
>After you've marked all translatable
      strings, you can use a utility to generate translatable message
      files. Qt's utility&#8212;either <B
CLASS="COMMAND"
>lupdate</B
> or
      <B
CLASS="COMMAND"
>findtr</B
>&#8212;can only work with strings marked with
      <TT
CLASS="FUNCTION"
>tr()</TT
>, and only with double-quoted
      strings.</P
><P
>There is a significant, though quite
        esoteric, difference between the way Qt2 and Qt3 handle the
        <TT
CLASS="FUNCTION"
>tr()</TT
>. This means that when you use a
        version of PyQt designed to work with Qt 2, the
        <TT
CLASS="FUNCTION"
>tr()</TT
> doesn't work out of the box. You
        need to add a <TT
CLASS="FUNCTION"
>tr()</TT
> to all your classes
        that calls <TT
CLASS="FUNCTION"
>qApp.translate()</TT
>. This is what
        is done in the current <SPAN
CLASS="APPLICATION"
>Kalam</SPAN
> code,
        because I wrote and developed the book using PyQt 2.5.</P
><P
>Another important difference: in Qt 3, you can also use
        <TT
CLASS="FUNCTION"
>trUtf8()</TT
>, if the source text is in the
        utf-8 encoding. That means that if your translators produce
        utf-8 encoded files, instead of plain two-byte Unicode text,
        you should use this function, instead of
        <TT
CLASS="FUNCTION"
>tr()</TT
>. With PyQt 3 for Qt 3,
        <TT
CLASS="FUNCTION"
>trUtf8*()</TT
> will be used automatically by
        <B
CLASS="COMMAND"
>pyuic</B
>.</P
><P
>You can also tell
      <SPAN
CLASS="APPLICATION"
>pyuic</SPAN
> to use another function instead
      of <TT
CLASS="FUNCTION"
>tr()</TT
> - for instance, the Python
      pygettext.py default <TT
CLASS="FUNCTION"
>_()</TT
>. If you do that,
      with the command:</P
><PRE
CLASS="SCREEN"
>pyuic -tr _ frmsettings.ui 
      </PRE
><P
>there will be one important difference: by
      default, the translation function <TT
CLASS="FUNCTION"
>tr()</TT
> has
      class-local scope, i.e. it is prefixed with
      <TT
CLASS="VARNAME"
>self</TT
>. But a custom translation function has
      global scope - exactly what you need for the Python
      implementation of gettext.</P
><P
>So, you can either do:</P
><PRE
CLASS="SCREEN"
>boud@calcifer:~/doc/pyqt/ch19/kalam &#62; pygettext.py --keyword=tr kalamapp.py
    </PRE
><P
>Which creates a file called
      <TT
CLASS="FILENAME"
>messages.pot</TT
>, or:</P
><PRE
CLASS="SCREEN"
>boud@calcifer:~/doc/pyqt/ch19/kalam &#62; findtr kalamapp.py  
    </PRE
><P
>The resulting files are almost identical -
      except for the minor detail of order. You should make a copy of
      these files for every language you need a translation for, and
      send them to your translators. They can use any editor, or a
      specialised application like <SPAN
CLASS="APPLICATION"
>KBabel</SPAN
>
      to translate the text, and send it back in the form of a
      translated <TT
CLASS="FILENAME"
>.pot</TT
> file.</P
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>KBabel</P
></DIV
></P
></DIV
><P
>The result can be compiled to
      <TT
CLASS="FILENAME"
>.mo</TT
> files using the
      <TT
CLASS="FILENAME"
>msgfmt.py</TT
> utility which should hide
      somewhere in you Python installation.</P
><P
>Finally, you can use these message catalog
      by loading it and installing a global function
      <TT
CLASS="FUNCTION"
>_()</TT
>. (That should have been the function
      you used to mark your strings):</P
><PRE
CLASS="PROGRAMLISTING"
>import gettext
gettext.install('kalam')
    </PRE
><P
>Or for message catalogs in the Unicode
      encoding:</P
><PRE
CLASS="PROGRAMLISTING"
>import gettext
gettext.install('kalam', '/usr/share/locale', unicode=1)
    </PRE
><P
>Here, the path should point to a locale directory where all
      message files can be found.</P
><P
>If you are working with Qt 3.0, you can
      also use a new tool: <SPAN
CLASS="APPLICATION"
>Qt Linguist</SPAN
>.
      This extracts the messages to a special, xml-based, format, and
      you can create message catalogs with a nice GUI frontend.</P
><P
>To use <SPAN
CLASS="APPLICATION"
>Qt
        Linguist</SPAN
>, you need to make a Qt project file
      containing the following text:</P
><PRE
CLASS="SCREEN"
>SOURCES = configtest.py \
dlgfindreplace.py \
dlgsettings.py \
docmanager.py \
docmanagertest.py \
edmund.py \
frmfindreplace.py \
frmsettings.py \
kalamapp.py \
kalamconfig.py \
kalamdoc.py \
kalamview.py \
macromanager.py \
macromanagertest.py \
main.py \
resources.py \
sitecustomize.py \
startup.py 

TRANSLATIONS = kalam_nl.ts

    </PRE
><P
>And run the following command:</P
><PRE
CLASS="SCREEN"
>boud@calcifer:~/doc/pyqt/ch19/kalam &#62; lupdate kalam.pro
    </PRE
><P
>After spewing out a lot of warnings (this
      tool expects C++, not python) a file in xml format is created
      which  you can edit with an editor or with
      <SPAN
CLASS="APPLICATION"
>Qt Linguist</SPAN
>.</P
><DIV
CLASS="MEDIAOBJECT"
><P
><DIV
CLASS="CAPTION"
><P
>The Qt Linguist screen</P
></DIV
></P
></DIV
><P
>If the translator is finished, he or she
      can choose "release" in the menubar and generate a
      <TT
CLASS="FILENAME"
>.qm</TT
> message catalog.</P
><P
>Using this catalog in your application is
      a simple matter of installing the appropriate translator:</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 25-1. Installing the translator</B
></P
><PRE
CLASS="PROGRAMLISTING"
>#!/usr/bin/env python
"""
main.py - application starter

copyright: (C) 2001, Boudewijn Rempt
email:     boud@rempt.xs4all.nl
"""
import sys, locale

from qt import *

from kalamapp import KalamApp
from kalamdoc import KalamDoc
from kalamview import KalamView
import kalamconfig

from resources import TRUE, FALSE

def main(args):
    app=QApplication(args)

    translator = QTranslator(app)
    translator.load("kalam_" + locale.getlocale()[0] + ".qm",
                    kalamconfig.get("libdir","."))
    app.installTranslator(translator)

    kalam = KalamApp()
    app.setMainWidget(kalam)
    kalam.show()
    if len(args) &#62; 1:
        for arg in args[1:]:
            document=KalamDoc()
            document.open(arg)
            kalam.docManager.addDocument(document, KalamView)
    app.exec_loop()
    
if __name__=="__main__":
    main(sys.argv)
    </PRE
></DIV
><P
>Two remarks: note how we use the
      <TT
CLASS="FILENAME"
>locale</TT
> module to determine the language of
      the user. This returns a tuple containing a language code and a
      character set that correspond the user locale, as set by the
      operating system: <TT
CLASS="VARNAME"
>['en_US', 'ISO8859-1']</TT
>. If
      you always use the language code as the second part for your
      filename, then Qt will be able to determine which translation
      file to load.</P
><P
>Note also that the location of that
      message file is determined by a configuration option. Standard
      Unix <TT
CLASS="FILENAME"
>.mo</TT
> files tend to go into
      <TT
CLASS="FILENAME"
>/usr/share/locale/</TT
>, but there is no
      corresponding standard for Qt <TT
CLASS="FILENAME"
>.qm</TT
> messages,
      and you might as well put those in the application installation
      directory. Where that is, will be determined in the next
      chapter.</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=x8207.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=c8349.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Conclusion</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=p4627.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Delivering your Application</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
