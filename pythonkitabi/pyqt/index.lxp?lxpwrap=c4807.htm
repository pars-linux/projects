

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=c4807.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>Actions: menus, toolbars and accelerators</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Creating real applications with PyQt"
HREF="p4627.htm"><LINK
REL="PREVIOUS"
TITLE="Project layout"
HREF="x4782.htm"><LINK
REL="NEXT"
TITLE="Menus"
HREF="x4954.htm"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=x4782.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=x4954.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="CHAPTER"
><H1
>Chapter 13. Actions: menus, toolbars and accelerators</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#AEN4824">Actions</A
></DT
><DT
><A href="index.lxp%3Flxpwrap=x4954.htm">Menus</A
></DT
><DT
><A href="index.lxp%3Flxpwrap=x4974.htm">Toolbars</A
></DT
><DT
><A href="index.lxp%3Flxpwrap=x5021.htm">Keyboard accelerators</A
></DT
><DT
><A href="index.lxp%3Flxpwrap=x5049.htm">Setting an application icon</A
></DT
></DL
></DIV
><P
>In this chapter we investigate adding the
    command structure to the application framework we developed in
    <A href="index.lxp%3Flxpwrap=c4631.htm">Chapter 12</A
>.
    This consists of <TT
CLASS="CLASSNAME"
>QAction</TT
> objects that are
    added to toolbars and menu bars, and that can provide keyboard
    accelerators.</P
><P
>Creating <TT
CLASS="CLASSNAME"
>QActions</TT
> and
    populating your toolbars and menus with them is not an exciting
    task, but it is necessary for any GUI application. Let's take a
    deeper look at the possibilities of actions, toolbars and
    menus.</P
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
>Actions</A
></H1
><P
>We first encountered the
      <TT
CLASS="CLASSNAME"
>QAction</TT
> class in <A href="index.lxp%3Flxpwrap=c2591.htm">Chapter 10</A
>. To
      recap briefly, <TT
CLASS="CLASSNAME"
>QAction</TT
> is a model of a
      well-defined action that a user can perpetrate against your
      application, or the data of your application models. This a very
      powerful concept. Previously, you would have to create menu
      items and connect them to slots, create toolbar items and
      connect them to slots, and create keyboard shortcuts and connect
      them to slots, <SPAN
><I
CLASS="EMPHASIS"
>too</I
></SPAN
>.</P
><P
>Keeping everything synchronized is
      difficult, and the whole process often leads to a horrible mess.
      Combine this with the possibility that you might want to disable
      some action&#8212;such as redo, when there's nothing to
      redo&#8212;and you're suddenly writing lots of duplicated code.
      And then, of course, you get to the point where your users want
      to modify the contents of the toolbar...</P
><P
>By bringing all the user-interface
      characteristics of actions together in the
      <TT
CLASS="CLASSNAME"
>QAction</TT
> class, most of the mess can be
      avoided. The <TT
CLASS="CLASSNAME"
>QAction</TT
> class tracks the
      following interface elements:</P
><P
></P
><UL
><LI
><P
>Pull-down menus text</P
></LI
><LI
><P
>Tooltip text</P
></LI
><LI
><P
>What's This text</P
></LI
><LI
><P
>Statusbar tips</P
></LI
><LI
><P
>Keyboard accelerators</P
></LI
><LI
><P
>Associated icons</P
></LI
><LI
><P
>Enabled/disabled</P
></LI
><LI
><P
>Toggled on or off</P
></LI
></UL
><P
>For each of these properties, there is a set function;
        although you can also set some properties in the constructor
        of <TT
CLASS="CLASSNAME"
>QAction</TT
>. Here is an annotated example
        of a complete <TT
CLASS="CLASSNAME"
>QAction</TT
>
        definition:</P
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example 13-1. Defining a complex toggle action</B
></P
><PRE
CLASS="PROGRAMLISTING"
>    planAction=QAction(self)                               <IMG
SRC="images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
>
    planAction.setIconSet(QIconSet(QPixmap(plan)))         <IMG
SRC="images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
>
    planAction.setText("Plan")                             <IMG
SRC="images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
>
    planAction.setMenuText("&#38;Plan ...")                    <IMG
SRC="images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
>
    planAction.setOn(0)
    planAction.setStatusTip("Enable the cunning plan")     <IMG
SRC="images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
>
    planAction.setToolTip("Enables the cunning plan")      <IMG
SRC="images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
>
    planAction.setWhatsThis(                               <IMG
SRC="images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
>
"""Plan

Selecting plan enables the cunning plan 
for this window.""")
    planAction.setAccel(QAccel.stringToKey("CTRL+C"),)     <IMG
SRC="images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
>
    planAction.setToggleAction(1)                          <IMG
SRC="images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
>
        </PRE
><DIV
CLASS="CALLOUTLIST"
><DL
COMPACT="COMPACT"
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#ACTION%2eCONSTRUCTOR"><IMG
SRC="images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
></DT
><DD
>There are three constructors that
              create a <TT
CLASS="CLASSNAME"
>QAction</TT
> with some of the
              properties already set. However, I find it nicer to
              create an empty <TT
CLASS="CLASSNAME"
>QAction</TT
> and set
              everything by hand. Besides, the next thing we would
              like to do is to read in the definition of a
              <TT
CLASS="CLASSNAME"
>QAction</TT
> from an XML file or a
              Python dictionary, and automatically generate the
              actions. If you want to do this, it is just as easy to
              set every property separately.</DD
><DD
><P
>One important parameter is the
              <TT
CLASS="VARNAME"
>parent</TT
> to the
              <TT
CLASS="CLASSNAME"
>QAction</TT
>. You can create groups of
              <TT
CLASS="CLASSNAME"
>QAction</TT
>s &#8212;
              <TT
CLASS="CLASSNAME"
>QActionGroup</TT
>s. A
              <TT
CLASS="CLASSNAME"
>QActionGroup</TT
> is a type of
              <TT
CLASS="CLASSNAME"
>QAction</TT
> that functions like a type
              of <TT
CLASS="CLASSNAME"
>QGroupBox</TT
>: it can group
              actions into mutually exclusive choices. The whole group
              of actions can be added to a menu.</P
></DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#ICONSET"><IMG
SRC="images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
></DT
><DD
>The set of icons you associate
              with an action is used to paint the toolbar buttons.
              They are also used to decorate the pull-down menus.
              <TT
CLASS="CLASSNAME"
>QIconSet</TT
> can generate icons in
              different sizes and with an active, normal or disabled
              look all by itself, based on one icon&#8212;or you can
              explicitly set icons of different sizes. You can provide
              a user option to toggle
              <TT
CLASS="CLASSNAME"
>QMainWindow</TT
>.<TT
CLASS="FUNCTION"
>setUsesBigPixmaps</TT
> 
              on or off. This decides whether the toolbars will be
              drawn with big icons, or small ones.</DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#SETTEXT"><IMG
SRC="images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
></DT
><DD
>This is a generic text that can be
              used where a more specific text hasn't been set. For
              instance, if you enable captions in toolbars with
              <TT
CLASS="CLASSNAME"
>QMainWindow</TT
>.<TT
CLASS="FUNCTION"
>setUsesTextLabel()</TT
>, 
              then this text will be used. It will also be used for
              pulldown menu texts, unless you set those explicitly
              with <TT
CLASS="FUNCTION"
>setMenuText()</TT
>. </DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#MENUTEXT"><IMG
SRC="images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
></DT
><DD
>By setting the menutext
              explicitly, you can add keyboard shortcuts (like alt-p
              in this case), or the three dots that indicate that a
              dialog window will open. You wouldn't want the shortcut
              to show up on toolbar captions&#8212;they don't work
              there, so you can set them in the menu text, by
              prefixing an ampersand (&#38;) to the shortcut
              letter.</DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#TOGGLEACTION"><IMG
SRC="images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
></DT
><DD
>Sometimes, a certain action
              toggles an application state on or off. Examples include
              setting toolbar captions of toolbar icon sizes, or bold
              or normal fonts. By grouping actions in action groups,
              you can create mutually exclusive groups (such as
              centered, justified or ragged text in a text
              editor).</DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#STATUSTIP"><IMG
SRC="images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></DT
><DD
>This text appears in the statusbar
              of the mainwindow when the user presses but doesn't
              release the menu option or toolbar button associated
              with the action.</DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#WHATSTHIS"><IMG
SRC="images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
></DT
><DD
>This is a longer text that appears
              in the form of a yellow note when the user presses the
              optional &#8216;what's this' button, which appears on the
              toolbar.</DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#ACCEL"><IMG
SRC="images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
></DT
><DD
>The keyboard accelerator that
            activates this action&#8212;for instance, pressing the control
            and the s key together&#8212;will trigger the
            <TT
CLASS="FUNCTION"
>activated()</TT
> signal, which might be
            connected to the <TT
CLASS="FUNCTION"
>save()</TT
> slot function.
            It is easiest to construct this using
            <TT
CLASS="CLASSNAME"
>QAccel</TT
>'s
            <TT
CLASS="FUNCTION"
>stringToKey()</TT
> function. Not only is
            this very convenient, it can also be translated to
            languages where a different shortcut key is preferred, by
            using either pygettext or PyQt's
            <TT
CLASS="FUNCTION"
>tr()</TT
>. See <A href="index.lxp%3Flxpwrap=c8212.htm">Chapter 25</A
> for
            more information on internationalizing an
            application.</DD
><DT
><A href="index.lxp%3Flxpwrap=c4807.htm#ON"><IMG
SRC="images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
></DT
><DD
>Of course, if you create a toggle
              action, it is nice to be able to set the initial
              state&#8212;which is what this does.</DD
></DL
></DIV
></DIV
><P
>The <TT
CLASS="CLASSNAME"
>QAction</TT
> class can emit two
        signals:</P
><P
></P
><UL
><LI
><P
>activated()</P
></LI
><LI
><P
>toggled(boolean)</P
></LI
></UL
><P
>By connecting these signals to the correct slots (either
        directly in the document, or proxy slots defined in the
        application interface), you have encapsulated the entire
        behavior of your interface.</P
><PRE
CLASS="PROGRAMLISTING"
>        self.connect(planaction,
                     SIGNAL("activated()"),
                     self.slotExecuteCunningPlan)
      </PRE
><P
>or, for a toggle action:</P
><PRE
CLASS="PROGRAMLISTING"
>        self.connect(planaction,
                     SIGNAL("toggled(bool)"),
                     self.slotActivateCunningPlan)
      </PRE
><P
>All that remains, is to add the actions to pulldown menus
      or toolbars:</P
><PRE
CLASS="PROGRAMLISTING"
>        self.planaction.addTo(self.planMenu)
        self.planaction.addTo(self.toolBar)
      </PRE
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=x4782.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=x4954.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Project layout</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=p4627.htm">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Menus</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
