

  
  <table border="0" cellspacing="0" cellpadding="3" width="100%"><tr><td>
    <div align="center" id="bldcontent">
      <a href="http://www.opendocspublishing.com/"><img src="../images/opendocs.png" width="63" height="76" border="0"></a>
      <br>
      <div class="symbol">Your OpenSource Publisher&#153;</div>
    </div>
    
  </td></tr></table>
  
  <div align="center" class="author">
      	<a href="../products.lxp.html">Products</a>
	&nbsp;|&nbsp;
	<a href="../wheretobuy.lxp.html">Where to buy</a>
	&nbsp;|&nbsp;
	<a href="../bookstore.lxp.html">Retailers</a>
	&nbsp;|&nbsp;
	<a href="../FAQ.lxp.html">FAQ</a>
	&nbsp;|&nbsp;
        <a href="../writeforus.lxp.html">Write for Us.</a>
        &nbsp;|&nbsp;
        <a href="index.lxp%3Flxpwrap=r9791.htm#contact">Contact Us.</a>
  </div>
    <table border="0" cellspacing="3" cellpadding="0" width="100%"><tr><td width="100%">
      <div class="content">
        <table border="0" cellspacing="2" cellpadding="0" width="100%"><tr><td width="100%">
          <div align="center">
<H4 CLASS="AUTHOR"><A NAME="AEN5">Boudewijn Rempt</A>
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
<img src="ODPyQT125.png">
</a>
<br>
ISBN: 0-97003300-4-4
<br>
<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0970033044/q4/103-9966647-8957454?v=glance&s=books">
Available from bookstores everywhere or you can order it here.
</a>
<p>
You can download the source files for the book <a href="pyqtsrc.tgz">(code / eps) here.</a>
<hr>
</div>

          
          <HTML
><HEAD
><TITLE
>sipParseArgs</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.72
"><LINK
REL="HOME"
TITLE="GUI Programming with Python: QT Edition"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Conversions and argument parsing"
HREF="x9684.htm#CONVFUNCS"><LINK
REL="PREVIOUS"
TITLE="SIPLIB Functions"
HREF="x9684.htm"><LINK
REL="NEXT"
TITLE="sipConvertToCpp"
HREF="r9932.htm"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>GUI Programming with Python: QT Edition</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A accesskey="P" href="index.lxp%3Flxpwrap=x9684.htm">Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A accesskey="N" href="index.lxp%3Flxpwrap=r9932.htm">Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
>sipParseArgs</A
></H1
><DIV
CLASS="REFNAMEDIV"
></A
><H2
>Name</H2
>sipParseArgs&nbsp;--&nbsp;Parse the arguments to a C/C++ function
              without any side effects</DIV
><DIV
CLASS="REFSYNOPSISDIV"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
></A
><P
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>int
                  sipParseArgs</CODE
>(int *
                  argsParsedp, PyObject *
                  sipArgs, char * fmt, ...);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
></A
><H2
>Description</H2
><DIV
CLASS="REFSECT2"
></A
><H3
>Return Value</H3
><P
>                false (or 0) if an error occurred, else true (or 1).
              </P
></DIV
><DIV
CLASS="REFSECT2"
></A
><H3
>argsParsedp</H3
><P
>                      Parsing stops if an error is encountered or all
                arguments / format specifiers are exhausted. The
                number of arguments parsed so far is stored here along
                with error flags. </A
><BLOCKQUOTE
CLASS="BLOCKQUOTE"
><DIV
CLASS="TABLE"
></A
><P
><B
>Table C-1. Error flags in sipParseArgs()</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><THEAD
><TR
><TH
WIDTH="100"
ALIGN="CENTER"
VALIGN="TOP"
>Flag Name</TH
><TH
WIDTH="200"
ALIGN="LEFT"
VALIGN="TOP"
>Meaning</TH
></TR
></THEAD
><TBODY
><TR
><TD
WIDTH="100"
ALIGN="CENTER"
VALIGN="TOP"
>PARSE_OK</TD
><TD
WIDTH="200"
ALIGN="LEFT"
VALIGN="TOP"
>Parse is Ok so far</TD
></TR
><TR
><TD
WIDTH="100"
ALIGN="CENTER"
VALIGN="TOP"
>PARSE_MANY</TD
><TD
WIDTH="200"
ALIGN="LEFT"
VALIGN="TOP"
>Too many arguments</TD
></TR
><TR
><TD
WIDTH="100"
ALIGN="CENTER"
VALIGN="TOP"
>PARSE_FEW</TD
><TD
WIDTH="200"
ALIGN="LEFT"
VALIGN="TOP"
>Too few arguments</TD
></TR
><TR
><TD
WIDTH="100"
ALIGN="CENTER"
VALIGN="TOP"
>PARSE_TYPE</TD
><TD
WIDTH="200"
ALIGN="LEFT"
VALIGN="TOP"
>Argument with a bad type</TD
></TR
><TR
><TD
WIDTH="100"
ALIGN="CENTER"
VALIGN="TOP"
>PARSE_MASK</TD
><TD
WIDTH="200"
ALIGN="LEFT"
VALIGN="TOP"
>Mask covering the error flag
                            bits</TD
></TR
></TBODY
></TABLE
></DIV
></BLOCKQUOTE
>
              </P
></DIV
><DIV
CLASS="REFSECT2"
></A
><H3
>sipArgs</H3
><P
>                A pointer to a tuple which supplies the arguments to
                be parsed.
              </P
></DIV
><DIV
CLASS="REFSECT2"
></A
><H3
>fmt</H3
><P
>                      Format string describing arguments. A leading
                '-' in the format string disposes of the arguments on
                a successful parse. A '|' in the format string
                signifies that the following arguments are optional.
                The following format specifiers are recognized:
                </A
><BLOCKQUOTE
CLASS="BLOCKQUOTE"
><DIV
CLASS="TABLE"
></A
><P
><B
>Table C-2. Format specifiers for
                      sipParseArgs()</B
></P
><TABLE
BORDER="1"
CLASS="CALSTABLE"
><THEAD
><TR
><TH
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>fmt</TH
><TH
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Operand type</TH
><TH
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>expected C argument(s)</TH
></TR
></THEAD
><TBODY
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>s</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>String or None</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>char **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>S</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Slot name, return the name</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>char **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>G</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Signal name, return the name</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>char **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>I</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Class instance</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>int (*convfunc)(PyObject *), PyObject
                            **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>O</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Python object of any type</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>PyObject **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>T</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Python object of given type</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>PyTypeObject *, PyObject **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>R</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Sub-class of QObject</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>PyObject **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>F</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Python callable object</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>PyObject **</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>a</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Byte array or None</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>char **, int *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>c</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Character</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>char *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>i</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Integer</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>int *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>h</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Short integer</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>short *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>l</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Long integer</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>long *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>f</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Float</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>float *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>d</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Double float</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>double *</TD
></TR
><TR
><TD
WIDTH="30"
ALIGN="CENTER"
VALIGN="TOP"
>v</TD
><TD
WIDTH="150"
ALIGN="LEFT"
VALIGN="TOP"
>Void pointer</TD
><TD
WIDTH="100%"
ALIGN="LEFT"
VALIGN="TOP"
>void **</TD
></TR
></TBODY
></TABLE
></DIV
></BLOCKQUOTE
>
              </P
></DIV
><DIV
CLASS="REFSECT2"
></A
><H3
>...</H3
><P
>                A variable number of pointers to the arguments which
                will take the parsed values.
              </P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
></A
><H2
>Examples</H2
><DIV
CLASS="EXAMPLE"
></A
><P
><B
>Example C-1. Interface for
                QRegExp::match</B
></P
><PRE
CLASS="PROGRAMLISTING"
>// Attempts to match in str, starting from position index. 
// Returns the position of the match, or -1 if there was no match.
// if len is not a null pointer, the length of the match is stored in *len. 
int match(const char* str, int index=0, int*=0) const;
%MemberCode
    // The Python interface returns the position and length as a tuple.
    const char *str;
    int index = 0;

    if (sipParseArgs(&#38;sipArgsParsed, sipArgs, "s|i", &#38;str, &#38;index))
    {
        int pos, len;
        QRegExp *ptr;

        if ((ptr = (QRegExp*) sipGetCppPtr(sipThis, sipClass_QRegExp)) == NULL)
            return NULL;
        pos = ptr -&#62; QRegExp::match(str, index, &#38;len);
        return Py_BuildValue("(ii)", pos, len);
    }
%End
            </PRE
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A accesskey="P" href="index.lxp%3Flxpwrap=x9684.htm">Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="H" href="index.lxp%3Flxpwrap=book1.htm">Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A accesskey="N" href="index.lxp%3Flxpwrap=r9932.htm">Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>SIPLIB Functions</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A accesskey="U" href="index.lxp%3Flxpwrap=x9684.htm#CONVFUNCS">Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>sipConvertToCpp</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>
      </td>
      </tr>
      </table>
      </td>
    </tr>
  </table>
  
    
